<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <EagleDir>$(MSBuildProjectDirectory)\..</EagleDir>
  </PropertyGroup>
  <Import Project="$(EagleDir)\Targets\Eagle.Presets.targets" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.50727</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{1D1E7DDA-7A47-4AC7-9648-5A12A91349C9}</ProjectGuid>
    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>EagleServices</RootNamespace>
    <AssemblyName>EagleServices</AssemblyName>
    <BaseAddress>1643118592</BaseAddress>
    <EagleProjectName>Eagle Services</EagleProjectName>
  </PropertyGroup>
  <Import Project="$(EagleDir)\Targets\Eagle.Builds.targets" />
  <Import Project="$(EagleDir)\Targets\Eagle.Settings.targets" />
  <PropertyGroup Condition="'$(EagleOnlyNetFx20)' != 'false'">
    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <!--
        HACK: Apparently, Visual Studio hard-codes the physical path that it
              passes to the development web server (WebDev.WebServer.exe) via
              the command line; therefore, we must conform to its expectations
              of where the output files should reside.
    -->
    <EagleBinaryOutputPath>bin\</EagleBinaryOutputPath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(EagleBinaryOutputPath)' != ''">
    <OutputPath>$(EagleBinaryOutputPath)</OutputPath>
    <DocumentationFile Condition="'$(EagleDocumentationFile)' != 'false'">$(EagleBinaryOutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Components\Public\Eagle.cs" />
    <Compile Include="Components\Public\MethodResult.cs" />
    <Compile Include="Interfaces\Public\Eagle.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Configurations\Web.config" />
    <None Include="Services\Eagle.asmx" />
  </ItemGroup>
  <PropertyGroup Condition="'$(EagleSerialization)' != 'false'">
    <DefineConstants>$(DefineConstants);SERIALIZATION</DefineConstants>
  </PropertyGroup>
  <ItemGroup Condition="'$(EagleSolution)' != 'false'">
    <ProjectReference Include="..\Library\Eagle2005.csproj">
      <Project>{2D4021DA-415C-4FAD-95FF-6ACA0974A677}</Project>
      <Name>Eagle2005</Name>
      <!--
          HACK: Apparently, Visual Studio cannot figure out that the referenced
                assemblies should be copied into the "Temporary ASP.NET Files"
                directory along with the primary project assembly; therefore,
                uncommenting the line below will break the ability to debug this
                project within the IDE.
      -->
      <!-- <Private>False</Private> -->
    </ProjectReference>
  </ItemGroup>
  <ItemGroup Condition="'$(EagleSolution)' == 'false'">
    <Reference Include="Eagle">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>$(EagleLkgDir)\bin\Eagle.dll</HintPath>
      <!--
          HACK: Apparently, Visual Studio cannot figure out that the referenced
                assemblies should be copied into the "Temporary ASP.NET Files"
                directory along with the primary project assembly; therefore,
                uncommenting the line below will break the ability to debug this
                project within the IDE.
      -->
      <!-- <Private>False</Private> -->
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Web.Services" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v8.0\WebApplications\Microsoft.WebApplication.targets"
          Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v8.0\WebApplications\Microsoft.WebApplication.targets')" />
  <Import Project="$(EagleDir)\Targets\Eagle.targets" />
  <PropertyGroup>
    <BuildDependsOn>
      EagleDetectUserBuilds;
      EagleDetectUserSettings;
      EagleDetectBuildTool;
      EagleDetectOperatingSystem;
      $(BuildDependsOn);
      EagleStripPdbPath;
      EagleStrongNameSign;
      EagleCopyWebConfigurations;
      FixCopyFilesToOutputDirectory;
      GetDoneFiles;
      UpdateDoneFiles;
    </BuildDependsOn>
    <CleanDependsOn>
      $(CleanDependsOn);
      EagleCleanWebConfigurations;
      CleanDoneFiles;
    </CleanDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="'$(ProjectBuildOutputIsLocked)' != 'false' And
                            Exists('$(MSBuildProjectDirectory)\bin\LOCKED')">
    <!--
        NOTE: We cannot build this project if the build output (directory)
              has been manually locked in place, e.g. because some other
              (client) machine may depend on it being intact.
    -->
    <BuildDependsOn>
      ProjectBuildOutputIsLocked
    </BuildDependsOn>
    <CleanDependsOn>
      ProjectBuildOutputIsLocked
    </CleanDependsOn>
  </PropertyGroup>
  <PropertyGroup Condition="!Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v8.0\WebApplications\Microsoft.WebApplication.targets') And
                            '$(MissingWebApplicationProjects)' != 'false'">
    <!--
        NOTE: We cannot build this project without the necessary project type;
              therefore, skip building it altogether.
    -->
    <BuildDependsOn>
      MissingWebApplicationProjects
    </BuildDependsOn>
  </PropertyGroup>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it.
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <SaveServerSettingsInUserFile>True</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>