###############################################################################
#
# exec.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

source [file join [file normalize [file dirname [info script]]] prologue.eagle]

###############################################################################

unset -nocomplain test_log_if
set test_log_if [expr {[info exists test_log] ? $test_log : ""}]

###############################################################################

unset -nocomplain comSpec
set comSpec [expr {[info exists env(ComSpec)] ? $env(ComSpec) : ""}]

###############################################################################

runTest {test exec-1.1 {cancel exec with events, kill process} -setup [subst \
    -nocommands -nobackslashes {
  #
  # NOTE: Set the channel to use for test output, if necessary.
  #
  if {![info exists test_channel]} then {
    set test_channel {$test_channel}
  }

  #
  # NOTE: Check for and load the Eagle test package, if necessary.
  #
  if {[catch {package present Eagle.Test}]} then {
    package require Eagle.Test
  }

  #
  # NOTE: Set the log file name to use for test output, if necessary.
  #
  if {![info exists test_log]} then {
    set test_log {$test_log_if}
  }

  #
  # NOTE: Set the operating system command shell to use for the test.
  #
  if {![info exists comSpec]} then {
    set comSpec {$comSpec}
  }

  set savedFlags [after flags]
  after flags =Immediate
}] -body {
  set pid 0
  set code [catch {
    after 1000 [list interp cancel]
    testExec $comSpec [list -nocapture -processid pid]
  } msg]

  set y [list $code $msg [expr {
    $pid != 0 && $pid == [info previouspid] ? \
        [kill -force $pid] : "cannot kill process, wrong pid"
  }]]
} -cleanup {
  catch {kill -force [info previouspid]}
  catch {info previouspid true}

  after flags [appendArgs = $savedFlags]
  unset -nocomplain y code pid msg savedFlags comSpec
  unset -nocomplain test_log test_channel
} -constraints {eagle windows testExec interactive tip285} -isolationLevel \
Interpreter -match regexp -result [string map [list cmd.exe [appendArgs \
.*\\\\ [file tail $comSpec]]] {^1 \{eval canceled\} \{(killed \{\d+\
\{cmd.exe\}\})|(killed \d+)\}$}]}

###############################################################################

unset -nocomplain comSpec

###############################################################################

runTest {test exec-1.2 {-debug option} -setup {
  unset -nocomplain output pid
} -body {
  set pid 0
  list [catch {
    testExec fossil [list -debug -processid pid] version
  } output] $pid [string trim $output]
} -cleanup {
  catch {info previouspid true}

  unset -nocomplain output pid
} -constraints {eagle testExec fossil_version} -match regexp -result \
{^0 \d+ \{This is fossil version \d+\.\d+ \[[0-9a-f]{10}\] \d{4}-\d{2}-\d{2}\
\d{2}:\d{2}:\d{2} UTC\}$}}

###############################################################################

runTest {test exec-1.3 {-nocapture with -success} -setup {
  unset -nocomplain output
} -body {
  list [catch {
    testExec $env(ComSpec) [list -nocapture -success Success] /c exit 1
  } output] $output
} -cleanup {
  catch {info previouspid true}

  unset -nocomplain output
} -constraints {eagle windows testExec comSpec_cmd.exe} -result \
{1 {child process exited abnormally}}}

###############################################################################

#
# HACK: This test fails (intermittently) when run on the .NET runtime,
#       on both Windows and Linux, as recently as the .NET 8 release.
#       The failure appears to be caused by subtle memory mishandling.
#       Since this failure is NOT specific to Eagle, per se, this test
#       is simply skipped on all those runtimes.
#
runTest {test exec-2.1 {output capture stress test} -setup {
  unset -nocomplain count j t i arg errors

  proc shouldUseLoopback {} {
    if {![isWindows] || ![haveConstraint comSpec_cmd.exe]} then {
      return false
    }

    if {[hasRuntimeOption alwaysUseLoopbackForExecStress]} then {
      return true
    }

    if {![hasRuntimeOption maybeUseLoopbackForExecStress]} then {
      return false
    }

    return [expr {rand() >= 0.5}]
  }

  proc shouldUseThreads {} {
    if {![haveConstraint compile.THREADING]} then {
      return false
    }

    if {[hasRuntimeOption alwaysUseThreadsForExecStress]} then {
      return true
    }

    if {![hasRuntimeOption maybeUseThreadsForExecStress]} then {
      return false
    }

    return [expr {rand() >= 0.5}]
  }

  proc shouldRetryTestExec { retry varName } {
    if {$retry > 10} then {
      return false
    }

    upvar 1 $varName capture

    if {[info exists capture(error)] && \
        [string match "*database is locked*" $capture(error)]} then {
      after [expr {int(rand() * $::test_timeout)}]
      return true
    }

    return false
  }

  proc threadStart { arg } {
    set options [list \
        -setall -exitcode capture(exitCode) -stdout capture(output) \
        -stderr capture(error)]

    set ids [list \
        88cf0da6bc3fe69201d328495c3711f0f8b23177 \
        651e1624bb48bc22a0ab28853b9310e99cf7425a]; # SHA1-Id: Lf, Cr/Lf

    set rawFileName [file join $::test_data_path big_exec_raw.txt]
    set finalFileName [file join $::test_data_path big_exec.txt]

    set expected [readFile $finalFileName]
    set i [getStringFromObjectHandle $arg]
    set retry 0

    do {
      if {[shouldUseLoopback]} then {
        set code [catch {
          #
          # HACK: Skip using Fossil.  Execute a (simple) command that
          #       should return the expected output directly.  If the
          #       infrastructure used to capture [exec] output works,
          #       this should never fail.
          #
          testExec $::env(ComSpec) $options /c type [appendArgs \
              \" [file nativename $rawFileName] \"]
        } output]
      } else {
        set code [catch {
          #
          # HACK: Use the "--chdir" option here in an attempt to make
          #       sure we are reading from the Eagle repository.
          #
          testExec fossil $options artifact \
              --chdir [appendArgs \" $::test_data_path \"] \
              [lindex $ids 0]
        } output]
      }
    } while {[shouldRetryTestExec [incr retry] capture]}

    if {$code != 0} then {
      set error [appendArgs \
          "bad return code " $code " at iteration #" [expr {$i + 1}] \
          ": " $output]

      tputs $::test_channel [appendArgs "---- " $error]

      lappend ::errors $error
      return
    }

    if {[string tolower [hash normal sha1 $output]] ni $ids} then {
      if {[hasRuntimeOption saveBadOutputForExecStress]} then {
        set fileName(1) [file join [getTemporaryPath] \
            [appendArgs exec-2.1-out- [expr {$i + 1}] .bad1]]

        writeFile $fileName(1) $output

        if {[array size capture] > 0 && \
            [hasRuntimeOption saveCaptureDataForExecStress]} then {
          set fileName(2) [file join [getTemporaryPath] \
              [appendArgs exec-2.1-dump- [expr {$i + 1}] .bad1]]

          writeFile $fileName(2) [testArrayGet capture]

          tputs $::test_channel [appendArgs \
              "---- saved capture data to \"" $fileName(2) \"\n]
        }

        tputs $::test_channel [appendArgs \
            "---- saved bad raw output to \"" $fileName(1) \"\n]
      }

      set error [appendArgs \
          "bad raw output at iteration #" [expr {$i + 1}] ": " \
          $output]

      tputs $::test_channel [appendArgs "---- " $error]

      lappend ::errors $error
      return
    }

    set savedOutput $output

    set output [string map [list \r\n \n] $output]; # line-endings

    set output [join [split [regexp -all -line -inline -skip 1  -- \
        {^F .* ([0-9a-f]{40})$} $output] " "] \n]; # extract UUIDs

    if {$output ne $expected} then {
      if {[hasRuntimeOption saveBadOutputForExecStress]} then {
        set fileName(1) [file join [getTemporaryPath] \
            [appendArgs exec-2.1-out- [expr {$i + 1}] .bad2]]

        writeFile $fileName(1) $savedOutput

        if {[array size capture] > 0 && \
            [hasRuntimeOption saveCaptureDataForExecStress]} then {
          set fileName(2) [file join [getTemporaryPath] \
              [appendArgs exec-2.1-dump- [expr {$i + 1}] .bad2]]

          writeFile $fileName(2) [testArrayGet capture]

          tputs $::test_channel [appendArgs \
              "---- saved capture data to \"" $fileName(2) \"\n]
        }

        tputs $::test_channel [appendArgs \
            "---- saved bad processed output to \"" $fileName(1) \"\n]
      }

      set error [appendArgs \
          "bad processed output at iteration #" [expr {$i + 1}] ": " \
          $output]

      tputs $::test_channel [appendArgs "---- " $error]

      lappend ::errors $error
      return
    }
  }

  if {[info exists test_stress_count]} then {
    set count(1) $test_stress_count; # NOTE: Beta 45+.
  } else {
    set count(1) 10000; # NOTE: Beta 44-.
  }

  set count(2) 25; # thread count
} -body {
  tputs $test_channel [appendArgs \
      "---- doing test exec-2.1 with iteration count " \
      $count(1) ", which can take several minutes to run\n"]

  set gcc(before) [object invoke -flags +NonPublic \
      Eagle._Components.Private.DebugOps globalComplainCount]

  set errors [list]

  for {set i 0} {$i < $count(1)} {incr i} {
    set arg [object invoke -create Int32 Parse $i]

    if {[shouldUseThreads]} then {
      for {set j 0} {$j < $count(2)} {incr j} {
        set t($i,$j) [createThread threadStart true]
        startThread $t($i,$j) true $arg
      }

      for {set j 0} {$j < $count(2)} {incr j} {
        joinThread $t($i,$j) effective
      }

      for {set j 0} {$j < $count(2)} {incr j} {
        cleanupThread $t($i,$j)
        unset -nocomplain t($i,$j)
      }
    } else {
      threadStart $arg
    }

    set gcc($i) [object invoke -flags +NonPublic \
        Eagle._Components.Private.DebugOps globalComplainCount]

    if {([llength $errors] > 0 || $gcc($i) > $gcc(before)) && \
        [hasRuntimeOption failFastForExecStress]} then {
      break
    }
  }

  set gcc(after) [object invoke -flags +NonPublic \
      Eagle._Components.Private.DebugOps globalComplainCount]

  list $errors [expr {$gcc(after) == $gcc(before)}]
} -cleanup {
  for {set i 0} {$i < $count(1)} {incr i} {
    for {set j 0} {$j < $count(2)} {incr j} {
      if {[info exists t($i,$j)]} then {
        cleanupThread $t($i,$j)
        unset -nocomplain t($i,$j)
      }
    }
  }

  catch {object removecallback threadStart}
  catch {info previouspid true}

  rename threadStart ""
  rename shouldRetryTestExec ""
  rename shouldUseThreads ""
  rename shouldUseLoopback ""

  unset -nocomplain count j t i arg gcc errors
} -constraints {eagle testExec fossil_version fossil_repository_file\
maybeTimeIntensive file_big_exec.txt file_big_exec_raw.txt} \
-constraintExpression {![haveConstraint dotNetCore50] && \
![haveConstraint dotNetCore60] && ![haveConstraint dotNetCore70] && \
![haveConstraint dotNetCore80]} -time true -result {{} True}}

###############################################################################

if {[isEagle] && [haveConstraint file_isolated.eagle]} then {
  set isolationTemplate [readFile [file join $test_data_path isolated.eagle]]
} else {
  set isolationTemplate ""
}

###############################################################################

if {[isEagle] && [haveConstraint testExec]} then {
  tputs $test_channel [appendArgs \
      "---- running isolation tests (this may take a while)...\n"]
}

###############################################################################

tputs $test_channel "---- start of process isolation tests\n"

###############################################################################

#
# NOTE: This test is special.  It always runs in a child process.  It requires
#       an Eagle release of Beta 34 or later.  It is likely that this will not
#       work correctly on Mono.  That being said, at the time this was written
#       (June 2015), it was run on Mono 2.0.x and worked correctly.  However,
#       it does NOT appear to work on Mono 2.8, 2.10, 2.11, 3.0, 3.2, or 4.x,
#       at least not on Windows.  As of Mono 4.6.2 on Windows, it does appear
#       to work.
#
runTest {test processIsolation-1.1 {test with process isolation} -body {
  info pid
} -constraints {eagle testExec} -time true -match regexp -isolationLevel \
Process -isolationTemplate $isolationTemplate -isolationPathType Library \
-isolationFileName [file join $test_path temporary-isolated.eagle] \
-isolationOtherArguments [list -preInitialize [list set test_run_id \
[getTestRunId]] -preInitialize [list set test_run_bucket [getTestRunBucket]]] \
-isolationFailDetail Highest -isolationLogFile $test_log_if -noProcessId true \
-constraintExpression {[haveConstraint dotNetOrDotNetCore] || \
![haveConstraint windows] || [haveConstraint mono20] || \
[haveConstraint mono22] || [haveConstraint mono24] || \
[haveConstraint mono26] || [haveConstraint mono46]} -result {^\d+$}}

###############################################################################

tputs $test_channel "---- end of process isolation tests\n"

###############################################################################

unset -nocomplain isolationTemplate

###############################################################################

unset -nocomplain test_log_if

###############################################################################

source [file join [file normalize [file dirname [info script]]] epilogue.eagle]
