###############################################################################
#
# string-map.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

source [file join [file normalize [file dirname [info script]]] prologue.eagle]

###############################################################################

runTest {test concat-1.1 {simple concatenation} {
  concat a b c d e f g
} {a b c d e f g}}

###############################################################################

runTest {test concat-1.2 {merging lists together} {
  concat a {b c d} {e f g h}
} {a b c d e f g h}}

###############################################################################

runTest {test concat-1.3 {merge lists, retain sub-lists} {
  concat a {b {c d}} {{e f}} g h
} {a b {c d} {e f} g h}}

###############################################################################

runTest {test concat-1.4 {special characters} -body {
    concat a\{ {b \{c d} \{d
} -result "a\{\ b\ \\\{c\ d\ \{d"}

###############################################################################

runTest {test concat-2.1 {error: one empty argument} {
  concat {}
} {}}

###############################################################################

runTest {test concat-3.1 {error: no arguments} -body {
  list [catch concat msg] $msg
} -cleanup {
  unset -nocomplain msg
} -result {0 {}}}

###############################################################################

runTest {test concat-4.1 {pruning off extra white space} {
  concat {} {a b c}
} {a b c}}

###############################################################################

runTest {test concat-4.2 {pruning off extra white space} {
  concat x y "  a b c	\n\t  " "   "  " def "
} {x y a b c def}}

###############################################################################

runTest {test concat-4.3 {pruning off extra white space sets length correctly} {
  llength [concat { {{a}} }]
} 1}

###############################################################################

runTest {test string-95.1 {string map with empty strings} -body {
  list [string map [list] ""] \
      [string map [list] test] \
      [string map [list "" ""] ""] \
      [string map [list "" to] ""] \
      [string map [list "" ""] test] \
      [string map [list "" to] test] \
      [string map [list "" "" te to] test] \
      [string map [list "" to te to] test] \
      [string map [list "" "" te to "" ""] test] \
      [string map [list "" to te to "" ""] test] \
      [string map [list "" "" te to "" zz] test] \
      [string map [list "" to te to "" zz] test]
} -result {{} test {} {} test test tost tost tost tost tost tost}}

###############################################################################

catch {unset x0}
append x0 "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F"
append x0 "\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1A\x1B\x1C\x1D\x1E\x1F"
append x0 "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2A\x2B\x2C\x2D\x2E\x2F"
append x0 "\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3A\x3B\x3C\x3D\x3E\x3F"
append x0 "\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F"
append x0 "\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x5B\x5C\x5D\x5E\x5F"
append x0 "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F"
append x0 "\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x7B\x7C\x7D\x7E\x7F"
append x0 "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F"
append x0 "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
append x0 "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
append x0 "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
append x0 "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
append x0 "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
append x0 "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
append x0 "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"

###############################################################################

runTest {test string-97.1 {string map with all byte values} -body {
  #
  # NOTE: Make sure that every byte value can be handled by [string map].
  #
  set result [list]

  for {set i 0} {$i < 256} {incr i} {
    if {[isEagle]} then {
      set c [subst \\x[string format "{0:X}" $i]]
    } else {
      set c [format %c $i]
    }

    set s $x0
    lappend result [string first $c $s]

    set s [string map [list $c ""] $s]
    lappend result [string first $c $s]
  }

  set result
} -cleanup {
  unset -nocomplain c i s result
} -result \
{0 -1 1 -1 2 -1 3 -1 4 -1 5 -1 6 -1 7 -1 8 -1 9 -1 10 -1 11 -1 12 -1 13 -1 14\
-1 15 -1 16 -1 17 -1 18 -1 19 -1 20 -1 21 -1 22 -1 23 -1 24 -1 25 -1 26 -1 27\
-1 28 -1 29 -1 30 -1 31 -1 32 -1 33 -1 34 -1 35 -1 36 -1 37 -1 38 -1 39 -1 40\
-1 41 -1 42 -1 43 -1 44 -1 45 -1 46 -1 47 -1 48 -1 49 -1 50 -1 51 -1 52 -1 53\
-1 54 -1 55 -1 56 -1 57 -1 58 -1 59 -1 60 -1 61 -1 62 -1 63 -1 64 -1 65 -1 66\
-1 67 -1 68 -1 69 -1 70 -1 71 -1 72 -1 73 -1 74 -1 75 -1 76 -1 77 -1 78 -1 79\
-1 80 -1 81 -1 82 -1 83 -1 84 -1 85 -1 86 -1 87 -1 88 -1 89 -1 90 -1 91 -1 92\
-1 93 -1 94 -1 95 -1 96 -1 97 -1 98 -1 99 -1 100 -1 101 -1 102 -1 103 -1 104 -1\
105 -1 106 -1 107 -1 108 -1 109 -1 110 -1 111 -1 112 -1 113 -1 114 -1 115 -1\
116 -1 117 -1 118 -1 119 -1 120 -1 121 -1 122 -1 123 -1 124 -1 125 -1 126 -1\
127 -1 128 -1 129 -1 130 -1 131 -1 132 -1 133 -1 134 -1 135 -1 136 -1 137 -1\
138 -1 139 -1 140 -1 141 -1 142 -1 143 -1 144 -1 145 -1 146 -1 147 -1 148 -1\
149 -1 150 -1 151 -1 152 -1 153 -1 154 -1 155 -1 156 -1 157 -1 158 -1 159 -1\
160 -1 161 -1 162 -1 163 -1 164 -1 165 -1 166 -1 167 -1 168 -1 169 -1 170 -1\
171 -1 172 -1 173 -1 174 -1 175 -1 176 -1 177 -1 178 -1 179 -1 180 -1 181 -1\
182 -1 183 -1 184 -1 185 -1 186 -1 187 -1 188 -1 189 -1 190 -1 191 -1 192 -1\
193 -1 194 -1 195 -1 196 -1 197 -1 198 -1 199 -1 200 -1 201 -1 202 -1 203 -1\
204 -1 205 -1 206 -1 207 -1 208 -1 209 -1 210 -1 211 -1 212 -1 213 -1 214 -1\
215 -1 216 -1 217 -1 218 -1 219 -1 220 -1 221 -1 222 -1 223 -1 224 -1 225 -1\
226 -1 227 -1 228 -1 229 -1 230 -1 231 -1 232 -1 233 -1 234 -1 235 -1 236 -1\
237 -1 238 -1 239 -1 240 -1 241 -1 242 -1 243 -1 244 -1 245 -1 246 -1 247 -1\
248 -1 249 -1 250 -1 251 -1 252 -1 253 -1 254 -1 255 -1}}

###############################################################################

unset -nocomplain x0

###############################################################################

runTest {test string-98.1 {string first (various)} -body {
  set needle foo; set haystack foobarfoobar

  list [string first $needle $haystack] [string first $needle $haystack 0] \
      [string first $needle $haystack 3] [string first $needle $haystack 6] \
      [string first $needle $haystack 7] [string first $needle $haystack 9] \
      [string first $needle $haystack 11] [string first $needle $haystack 12] \
      [string first $needle $haystack 9999] [string first $needle $haystack -1]
} -cleanup {
  unset -nocomplain needle haystack
} -result {0 0 6 6 -1 -1 -1 -1 -1 0}}

###############################################################################

runTest {test string-98.2 {string last (various)} -body {
  set needle foo; set haystack foobarfoobar

  list [string last $needle $haystack] [string last $needle $haystack 0] \
      [string last $needle $haystack 3] [string last $needle $haystack 6] \
      [string last $needle $haystack 7] [string last $needle $haystack 9] \
      [string last $needle $haystack 11] [string last $needle $haystack 12] \
      [string last $needle $haystack 9999] [string last $needle $haystack -1]
} -cleanup {
  unset -nocomplain needle haystack
} -result {6 -1 0 0 0 6 6 6 6 -1}}

###############################################################################

runTest {test string-98.3 {string first (ordinal)} -body {
  list [string first \xFE th] [string first \xFE th 0] \
      [string first \xFE th 1] [string first \xFE th 2]
} -result {-1 -1 -1 -1}}

###############################################################################

runTest {test string-98.4 {string last (ordinal)} -body {
  list [string last \xFE th] [string last \xFE th 0] \
      [string last \xFE th 1] [string last \xFE th 2]
} -result {-1 -1 -1 -1}}

###############################################################################

runTest {test string-98.5 {string first} -body {
  list [string first "" ""] [string first "" a] [string first a ""] \
      [string first a a] [string first a aa] [string first aa a] \
      [string first aa aa] [string first aa aaa]
} -result {-1 -1 -1 0 0 -1 0 0}}

###############################################################################

runTest {test string-98.6 {string last} -body {
  list [string last "" ""] [string last "" a] [string last a ""] \
      [string last a a] [string last a aa] [string last aa a] \
      [string last aa aa] [string last aa aaa]
} -result {-1 -1 -1 0 1 -1 0 1}}

###############################################################################

runTest {test string-99.1 {string map string replace} -body {
  string map [list a b b c] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'b' is 'b' test of 'c' 'b'.}}

###############################################################################

runTest {test string-99.2 {string map string remove} -body {
  string map [list a ""] "this 'a' is 'a' test of 'b' 'a'."
} -result {this '' is '' test of 'b' ''.}}

###############################################################################

runTest {test string-99.3 {string map string insert} -body {
  string map [list a aa] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of 'b' 'aa'.}}

###############################################################################

runTest {test string-99.4 {string map string remove/insert} -body {
  string map [list b "" a aa] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of '' 'aa'.}}

###############################################################################

runTest {test string-99.5 {string map string insert/remove} -body {
  string map [list a aa b ""] "this 'a' is 'a' test of 'b' 'a'."
} -result {this 'aa' is 'aa' test of '' 'aa'.}}

###############################################################################

runTest {test string-99.6 {string map string insert/remove/replace} -body {
  string map [list a aa b "" c d] "this 'a' is 'a' test of 'b' 'c'."
} -result {this 'aa' is 'aa' test of '' 'd'.}}

###############################################################################

runTest {test string-99.7 {string map with -maximum 1} -body {
  list [string map -maximum 1 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{bar foo} 1}}

###############################################################################

runTest {test string-99.8 {string map with -maximum 0} -body {
  list [string map -maximum 0 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{foo foo} 0}}

###############################################################################

runTest {test string-99.9 {string map with -maximum -1} -body {
  list [string map -maximum -1 -countvar bar [list foo bar] "foo foo"] $bar
} -cleanup {
  unset -nocomplain bar
} -constraints {eagle} -result {{bar bar} 2}}

###############################################################################

runTest {test string-99.10 {string map duplicate "keys"} -body {
  string map [list a b a c] foobar
} -result {foobbr}}

###############################################################################

runTest {test string-99.11 {string map duplicate "values"} -body {
  string map [list f a o a] foobar
} -result {aaabar}}

###############################################################################

runTest {test string-99.12 {string map duplicate "keys" / "values"} -body {
  string map [list f a f a o b] foobar
} -result {abbbar}}

###############################################################################

runTest {test string-99.13 {string is list} -body {
  list [expr {int([string is list ""])}] \
      [expr {int([string is list -strict ""])}] \
      [expr {int([string is list Z])}] \
      [expr {int([string is list -strict Z])}] \
      [expr {int([string is list "Z Z"])}] \
      [expr {int([string is list -strict "Z Z"])}] \
      [expr {int([string is list "Z \{"])}] \
      [expr {int([string is list -strict "Z \{"])}] \
      [expr {int([string is list "Z \\\{"])}] \
      [expr {int([string is list -strict "Z \\\{"])}]
} -constraints {tcl85Feature} -result {1 1 1 1 1 1 0 0 1 1}}

###############################################################################

runTest {test string-99.14 {string is dict} -body {
  list [expr {int([string is dict ""])}] \
      [expr {int([string is dict -strict ""])}] \
      [expr {int([string is dict Z])}] \
      [expr {int([string is dict -strict Z])}] \
      [expr {int([string is dict "Z Z"])}] \
      [expr {int([string is dict -strict "Z Z"])}] \
      [expr {int([string is dict "Z \{"])}] \
      [expr {int([string is dict -strict "Z \{"])}] \
      [expr {int([string is dict "Z \\\{"])}] \
      [expr {int([string is dict -strict "Z \\\{"])}]
} -constraints {eagle} -result {1 1 0 0 1 1 0 0 1 1}}

###############################################################################

runTest {test string-99.15 {string is array} -body {
  list [expr {[string is array ""]}] \
      [expr {[string is array -strict ""]}] \
      [expr {[string is array no_library]}] \
      [expr {[string is array -strict no_library]}] \
      [expr {[string is array no_library(]}] \
      [expr {[string is array -strict no_library(]}] \
      [expr {[string is array no_library)]}] \
      [expr {[string is array -strict no_library)]}] \
      [expr {[string is array no_library()]}] \
      [expr {[string is array -strict no_library()]}] \
      [expr {[string is array no_library(no)]}] \
      [expr {[string is array -strict no_library(no)]}] \
      [expr {[string is array tcl_library]}] \
      [expr {[string is array -strict tcl_library]}] \
      [expr {[string is array tcl_library(]}] \
      [expr {[string is array -strict tcl_library(]}] \
      [expr {[string is array tcl_library)]}] \
      [expr {[string is array -strict tcl_library)]}] \
      [expr {[string is array tcl_library()]}] \
      [expr {[string is array -strict tcl_library()]}] \
      [expr {[string is array tcl_library(no)]}] \
      [expr {[string is array -strict tcl_library(no)]}] \
      [expr {[string is array tcl_platform]}] \
      [expr {[string is array -strict tcl_platform]}] \
      [expr {[string is array tcl_platform(]}] \
      [expr {[string is array -strict tcl_platform(]}] \
      [expr {[string is array tcl_platform)]}] \
      [expr {[string is array -strict tcl_platform)]}] \
      [expr {[string is array tcl_platform()]}] \
      [expr {[string is array -strict tcl_platform()]}] \
      [expr {[string is array tcl_platform(no)]}] \
      [expr {[string is array -strict tcl_platform(no)]}] \
      [expr {[string is array tcl_platform(engine)]}] \
      [expr {[string is array -strict tcl_platform(engine)]}] \
      [expr {[string is array env]}] \
      [expr {[string is array -strict env]}] \
      [expr {[string is array env(]}] \
      [expr {[string is array -strict env(]}] \
      [expr {[string is array env)]}] \
      [expr {[string is array -strict env)]}] \
      [expr {[string is array env()]}] \
      [expr {[string is array -strict env()]}] \
      [expr {[string is array env(no)]}] \
      [expr {[string is array -strict env(no)]}] \
      [expr {[string is array env(PATH)]}] \
      [expr {[string is array -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False False False False False False False False False False\
False True True False False False False False False False False False False\
True True False False False False False False False False False False}}

###############################################################################

runTest {test string-99.16 {string is element} -body {
  list [expr {[string is element ""]}] \
      [expr {[string is element -strict ""]}] \
      [expr {[string is element no_library]}] \
      [expr {[string is element -strict no_library]}] \
      [expr {[string is element no_library(]}] \
      [expr {[string is element -strict no_library(]}] \
      [expr {[string is element no_library)]}] \
      [expr {[string is element -strict no_library)]}] \
      [expr {[string is element no_library()]}] \
      [expr {[string is element -strict no_library()]}] \
      [expr {[string is element no_library(no)]}] \
      [expr {[string is element -strict no_library(no)]}] \
      [expr {[string is element tcl_library]}] \
      [expr {[string is element -strict tcl_library]}] \
      [expr {[string is element tcl_library(]}] \
      [expr {[string is element -strict tcl_library(]}] \
      [expr {[string is element tcl_library)]}] \
      [expr {[string is element -strict tcl_library)]}] \
      [expr {[string is element tcl_library()]}] \
      [expr {[string is element -strict tcl_library()]}] \
      [expr {[string is element tcl_library(no)]}] \
      [expr {[string is element -strict tcl_library(no)]}] \
      [expr {[string is element tcl_platform]}] \
      [expr {[string is element -strict tcl_platform]}] \
      [expr {[string is element tcl_platform(]}] \
      [expr {[string is element -strict tcl_platform(]}] \
      [expr {[string is element tcl_platform)]}] \
      [expr {[string is element -strict tcl_platform)]}] \
      [expr {[string is element tcl_platform()]}] \
      [expr {[string is element -strict tcl_platform()]}] \
      [expr {[string is element tcl_platform(no)]}] \
      [expr {[string is element -strict tcl_platform(no)]}] \
      [expr {[string is element tcl_platform(engine)]}] \
      [expr {[string is element -strict tcl_platform(engine)]}] \
      [expr {[string is element env]}] \
      [expr {[string is element -strict env]}] \
      [expr {[string is element env(]}] \
      [expr {[string is element -strict env(]}] \
      [expr {[string is element env)]}] \
      [expr {[string is element -strict env)]}] \
      [expr {[string is element env()]}] \
      [expr {[string is element -strict env()]}] \
      [expr {[string is element env(no)]}] \
      [expr {[string is element -strict env(no)]}] \
      [expr {[string is element env(PATH)]}] \
      [expr {[string is element -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False False False False False False False False False False\
False False False False False False False False False False False True True\
False False False False False False False False False False True True}}

###############################################################################

runTest {test string-99.17 {string is scalar} -body {
  list [expr {[string is scalar ""]}] \
      [expr {[string is scalar -strict ""]}] \
      [expr {[string is scalar no_library]}] \
      [expr {[string is scalar -strict no_library]}] \
      [expr {[string is scalar no_library(]}] \
      [expr {[string is scalar -strict no_library(]}] \
      [expr {[string is scalar no_library)]}] \
      [expr {[string is scalar -strict no_library)]}] \
      [expr {[string is scalar no_library()]}] \
      [expr {[string is scalar -strict no_library()]}] \
      [expr {[string is scalar no_library(no)]}] \
      [expr {[string is scalar -strict no_library(no)]}] \
      [expr {[string is scalar tcl_library]}] \
      [expr {[string is scalar -strict tcl_library]}] \
      [expr {[string is scalar tcl_library(]}] \
      [expr {[string is scalar -strict tcl_library(]}] \
      [expr {[string is scalar tcl_library)]}] \
      [expr {[string is scalar -strict tcl_library)]}] \
      [expr {[string is scalar tcl_library()]}] \
      [expr {[string is scalar -strict tcl_library()]}] \
      [expr {[string is scalar tcl_library(no)]}] \
      [expr {[string is scalar -strict tcl_library(no)]}] \
      [expr {[string is scalar tcl_platform]}] \
      [expr {[string is scalar -strict tcl_platform]}] \
      [expr {[string is scalar tcl_platform(]}] \
      [expr {[string is scalar -strict tcl_platform(]}] \
      [expr {[string is scalar tcl_platform)]}] \
      [expr {[string is scalar -strict tcl_platform)]}] \
      [expr {[string is scalar tcl_platform()]}] \
      [expr {[string is scalar -strict tcl_platform()]}] \
      [expr {[string is scalar tcl_platform(no)]}] \
      [expr {[string is scalar -strict tcl_platform(no)]}] \
      [expr {[string is scalar tcl_platform(engine)]}] \
      [expr {[string is scalar -strict tcl_platform(engine)]}] \
      [expr {[string is scalar env]}] \
      [expr {[string is scalar -strict env]}] \
      [expr {[string is scalar env(]}] \
      [expr {[string is scalar -strict env(]}] \
      [expr {[string is scalar env)]}] \
      [expr {[string is scalar -strict env)]}] \
      [expr {[string is scalar env()]}] \
      [expr {[string is scalar -strict env()]}] \
      [expr {[string is scalar env(no)]}] \
      [expr {[string is scalar -strict env(no)]}] \
      [expr {[string is scalar env(PATH)]}] \
      [expr {[string is scalar -strict env(PATH)]}]
} -constraints {eagle} -result {True False False False False False False False\
False False False False True True False False False False False False False\
False False False False False False False False False False False False False\
False False False False False False False False False False False False}}

###############################################################################

runTest {test string-99.18 {string is command} -body {
  list [expr {[string is command ""]}] \
      [expr {[string is command -strict ""]}] \
      [expr {[string is command -strict set]}] \
      [expr {[string is command -strict ::set]}] \
      [expr {[string is command -strict tclLog]}] \
      [expr {[string is command -strict ::tclLog]}] \
      [expr {[string is command -strict notThere]}] \
      [expr {[string is command -strict ::notThere]}] \
      [expr {[string is command -strict tcl::tm::UnknownHandler]}] \
      [expr {[string is command -strict ::tcl::tm::UnknownHandler]}] \
      [expr {[string is command -strict no::tm::UnknownHandler]}] \
      [expr {[string is command -strict ::no::tm::UnknownHandler]}]
} -constraints {eagle} -result \
{True False True True True True False False True True False False}}

###############################################################################

proc getStringIsClasses { type } {
  set result [list]

  switch -exact -- $type {
    character {
      lappend result alnum alpha ascii control digit graph lower \
          print punct space upper wordchar xdigit

      if {[isEagle]} then {
        lappend result asciialnum asciialpha asciidigit hexadecimal \
            reserved
      }
    }
    value {
      lappend result boolean double false integer none true \
          wideinteger

      if {[isEagle]} then {
        lappend result base64 byte datetime decimal dict guid \
            inetaddr list none number numeric timespan uri value \
            variant version xml
      }
    }
    entity {
      if {[isEagle]} then {
        lappend result array command component directory element \
            encoding file path identifier interpreter object \
            plugin scalar type
      }
    }
  }

  return $result
}

proc resetStringIsRefs {} {
  array unset ::refs *_used
}

proc getStringIsValues { class } {
  switch -exact -- $class {
    base64 {
      set ::refs(27X) "this is a test."
      set ::refs(28X) [base64 encode $::refs(27X)]
      set ::refs(29X) [appendArgs $::refs(28X) =]
      set ::refs(30X) [appendArgs $::refs(28X) ==]
      set ::refs(31X) [appendArgs $::refs(28X) ===]
      set ::refs(32X) [appendArgs $::refs(28X) ====]
      set ::refs(33X) [appendArgs $::refs(28X) ====]

      return [list \
          $::refs(27X) $::refs(28X) $::refs(29X) $::refs(30X) \
          $::refs(31X) $::refs(32X) $::refs(33X)]
    }
    component -
    directory -
    file -
    path {
      set ::refs(1X) [info script]
      set ::refs(2X) [pwd]
      set ::refs(3X) $::test_path
      set ::refs(4X) [file normalize ~]

      if {$class eq "component"} then {
        set ::refs(34X) t
        set ::refs(35X) .f
        set ::refs(36X) test
        set ::refs(37X) .file
        set ::refs(38X) test.file
        set ::refs(39X) " "
        set ::refs(40X) !
        set ::refs(41X) \"
        set ::refs(42X) #
        set ::refs(43X) $
        set ::refs(44X) %
        set ::refs(45X) &
        set ::refs(46X) -
        set ::refs(47X) /
        set ::refs(48X) @
        set ::refs(49X) \\
        set ::refs(50X) ^
        set ::refs(51X) _

        return [list \
            .  .. $::refs(1X) $::refs(2X) $::refs(3X) $::refs(4X) \
            $::refs(34X) $::refs(35X) $::refs(36X) $::refs(37X) \
            $::refs(38X) $::refs(39X) $::refs(40X) $::refs(41X) \
            $::refs(42X) $::refs(43X) $::refs(44X) $::refs(45X) \
            $::refs(46X) $::refs(47X) $::refs(48X) $::refs(49X) \
            $::refs(50X) $::refs(51X)]
      } else {
        return [list \
            .  .. $::refs(1X) $::refs(2X) $::refs(3X) $::refs(4X)]
      }
    }
    encoding {
      return [list \
          badenc utf-6 utf-8 utf8 UTF-8 utf-16 utf-32 utf-32BE \
          utf-32LE utf-32ME iso-8859-1 iso-8859-99 us-ascii null \
          binary channelDefault default systemDefault tclDefault \
          textDefault scriptDefault xmlDefault Identity OneByte \
          TwoByte Tcl]
    }
    guid {
      if {[info exists ::no(guidNew)]} then {
        set ::refs(5X) [object invoke -create -alias Guid Empty]
      } else {
        set ::refs(5X) [object invoke -create -alias Guid NewGuid]
      }

      set ::refs(6X) [expr {random()}]
      set ::refs(7X) [pid]
      set ::refs(8X) [$::refs(5X) ToString N]
      set ::refs(9X) [$::refs(5X) ToString D]
      set ::refs(10X) [$::refs(5X) ToString B]
      set ::refs(11X) [$::refs(5X) ToString P]

      return [list \
          - $::refs(7X) $::refs(6X) [guid null] $::refs(8X) $::refs(9X) \
          $::refs(10X) $::refs(11X)]
    }
    identifier {
      return [list a ab _ab 1ab ab1 _ \; : \{ \} \[ \] () \$ \r \n]
    }
    inetaddr {
      set ::refs(52X) 0
      set ::refs(53X) 0x0
      set ::refs(54X) [object invoke Int32 MinValue]
      set ::refs(55X) [object invoke Int32 MaxValue]
      set ::refs(56X) [object invoke UInt32 MinValue]
      set ::refs(57X) [object invoke UInt32 MaxValue]
      set ::refs(58X) [format 0x%x [object invoke Int32 MinValue]]
      set ::refs(59X) [format 0x%x [object invoke Int32 MaxValue]]
      set ::refs(60X) [format 0x%x [object invoke UInt32 MinValue]]
      set ::refs(61X) [format 0x%x [object invoke UInt32 MaxValue]]
      set ::refs(62X) 0.0.0.0
      set ::refs(63X) 1.1.1.1
      set ::refs(64X) 100.100.100.100
      set ::refs(65X) 255.255.255.255
      set ::refs(66X) 256.256.256.256
      set ::refs(67X) -1.-1.-1.-1
      set ::refs(68X) -0.-0.-0.-0
      set ::refs(69X) 0x0.0x0.0x0.0x0
      set ::refs(70X) 0x01.0x01.0x01.0x01
      set ::refs(71X) 0xFF.0xFF.0xFF.0xFF
      set ::refs(72X) 0x100.0x100.0x100.0x100

      return [list \
          $::refs(52X) $::refs(53X) $::refs(54X) $::refs(55X) \
          $::refs(56X) $::refs(57X) $::refs(58X) $::refs(59X) \
          $::refs(60X) $::refs(61X) $::refs(62X) $::refs(63X) \
          $::refs(64X) $::refs(65X) $::refs(66X) $::refs(67X) \
          $::refs(68X) $::refs(69X) $::refs(70X) $::refs(71X) \
          $::refs(72X)]
    }
    interpreter {
      set ::refs(6X) [expr {random()}]

      return [list \
          [object invoke Interpreter.GetActive Id] 0 -1 $::refs(6X)]
    }
    object {
      set ::refs(12X) [object create Int32]
      set ::refs(13X) [object load Eagle]

      return [list \
          null NULL $::refs(12X) $::refs(13X)]
    }
    plugin {
      set ::refs(25X) [getPluginName {^Eagle\._Plugins\.Core, .*$}]
      set ::refs(26X) [string map [list Core NotCore] $::refs(25X)]

      return [list \
          null true false -1 0 1 1.0 Eagle Eagle* Eagle.* $::refs(25X) \
          $::refs(26X)]
    }
    type {
      set ::refs(14X) [appendArgs \
          "Eagle._Commands.Set, " [lindex [info assembly] 0]]

      return [list \
          null NULL Interpreter StringList \
          Eagle._Interfaces.Public.IClientData Random Int32 \
          $::refs(14X) String System.Boolean NotAType Not.A.Type \
          {System.Collections.Generic.IEnumerable`1[System.String]}]
    }
    uri {
      set ::refs(13X) [object load Eagle]
      set ::refs(15X) [object invoke $::refs(13X) CodeBase]
      set ::refs(16X) [info engine Uri]

      return [list \
          null $::refs(16X) $::refs(15X) file://one/two/three]
    }
    version {
      return [list -1 0 1 1.0 1.1 1.0.0 1.1.2 1.0.0.0 1.1.1.2 1.1.1.1.2]
    }
    versionrange {
      return [list \
          good-bad - -1 -1.2 -1.2.3 -1.2.3.4 -1.2.3.4.5 1- 1-1 1-1.2 \
          1-1.2.3 1-1.2.3.4 1-1.2.3.4.5 1.2-1 1.2.3-1 1.2.3.4-1 \
          1.2.3.4.5-1 1-1.2 1-1.2.3 1-1.2.3.4 1-1.2.3.4.5 1.2-1.2 \
          1.2-1.2.3 1.2-1.2.3.4 1.2-1.2.3.4.5 1.2.3-1.2 1.2.3-1.2.3 \
          1.2.3-1.2.3.4 1.2.3-1.2.3.4.5 1.2.3.4-1 1.2.3.4-1.2 \
          1.2.3.4-1.2.3 1.2.3.4-1.2.3.4 1.2.3.4-1.2.3.4.5 1.2.3.4.5-1 \
          1.2.3.4.5-1.2 1.2.3.4.5-1.2.3 1.2.3.4.5-1.2.3.4 \
          1.2.3.4.5-1.2.3.4.5]
    }
    xml {
      set ::refs(18X) {<one>more</one>}
      set ::refs(19X) {<two />}
      set ::refs(20X) {<one two="three">more</one>}
      set ::refs(21X) {<one two="three">more}
      set ::refs(22X) {<one two="three>more</one>}
      set ::refs(23X) {<one><two>more</two></one>}
      set ::refs(24X) [readFile [file join $::test_data_path settings.xml]]

      return [list \
          null true false -1 0 1 1.0 $::refs(18X) $::refs(19X) \
          $::refs(20X) $::refs(21X) $::refs(22X) $::refs(23X) \
          $::refs(24X)]
    }
    boolean -
    true -
    false -
    double -
    integer -
    wideinteger -
    byte -
    decimal -
    none -
    numeric -
    number -
    value -
    variant {
      set values [list \
          null true false abc ABC 0xDEAD 0xC0FFEE abz ABZ __ 0_ _0 \
          # . \{ \} \$ -1.7976931348623157E+308 -3.40282347E+38 \
          -79228162514264337593543950335 -9223372036854775808 \
          -2147483648 -32768 -128 -1 -0x0 0 0x0 1 0x1 127 0xFF 0x100 \
          32767 65535 2147483647 4294967295 9223372036854775807 \
          18446744073709551615 79228162514264337593543950335 \
          3.40282347E+38 1.7976931348623157E+308]

      if {[isEagle]} then {
        set expr {$class in [list value variant]}

        if {[expr $expr]} then {; # NOTE: Eagle only.
          lappend values \
              "OCT 21 2015 11:29 PM +0000" 0.00:00:00.00 [guid null]
        }

        if {$class eq "variant"} then {; # NOTE: Also Eagle only.
          set ::refs(17X) [object create Int32]

          lappend values $::refs(17X) SomeString
        }
      }

      return $values
    }
    alnum -
    alpha -
    ascii -
    asciialnum -
    asciialpha -
    asciidigit -
    control -
    digit -
    graph -
    hexadecimal -
    lower -
    print -
    punct -
    reserved -
    space -
    upper -
    wordchar -
    xdigit {
      return [list \
          \x00 \x01 \x02 \x03 \x04 \x05 \x06 \x07 \x08 \x09 \x0A \x0B \x0C \
          \x0D \x0E \x0F \x10 \x11 \x12 \x13 \x14 \x15 \x16 \x17 \x18 \x19 \
          \x1A \x1B \x1C \x1D \x1E \x1F \x20 \x21 \x22 \x23 \x24 \x25 \x26 \
          \x27 \x28 \x29 \x2A \x2B \x2C \x2D \x2E \x2F \x30 \x31 \x32 \x33 \
          \x34 \x35 \x36 \x37 \x38 \x39 \x3A \x3B \x3C \x3D \x3E \x3F \x40 \
          \x41 \x42 \x43 \x44 \x45 \x46 \x47 \x48 \x49 \x4A \x4B \x4C \x4D \
          \x4E \x4F \x50 \x51 \x52 \x53 \x54 \x55 \x56 \x57 \x58 \x59 \x5A \
          \x5B \x5C \x5D \x5E \x5F \x60 \x61 \x62 \x63 \x64 \x65 \x66 \x67 \
          \x68 \x69 \x6A \x6B \x6C \x6D \x6E \x6F \x70 \x71 \x72 \x73 \x74 \
          \x75 \x76 \x77 \x78 \x79 \x7A \x7B \x7C \x7D \x7E \x7F \x80 \x81 \
          \x82 \x83 \x84 \x85 \x86 \x87 \x88 \x89 \x8A \x8B \x8C \x8D \x8E \
          \x8F \x90 \x91 \x92 \x93 \x94 \x95 \x96 \x97 \x98 \x99 \x9A \x9B \
          \x9C \x9D \x9E \x9F \xA0 \xA1 \xA2 \xA3 \xA4 \xA5 \xA6 \xA7 \xA8 \
          \xA9 \xAA \xAB \xAC \xAD \xAE \xAF \xB0 \xB1 \xB2 \xB3 \xB4 \xB5 \
          \xB6 \xB7 \xB8 \xB9 \xBA \xBB \xBC \xBD \xBE \xBF \xC0 \xC1 \xC2 \
          \xC3 \xC4 \xC5 \xC6 \xC7 \xC8 \xC9 \xCA \xCB \xCC \xCD \xCE \xCF \
          \xD0 \xD1 \xD2 \xD3 \xD4 \xD5 \xD6 \xD7 \xD8 \xD9 \xDA \xDB \xDC \
          \xDD \xDE \xDF \xE0 \xE1 \xE2 \xE3 \xE4 \xE5 \xE6 \xE7 \xE8 \xE9 \
          \xEA \xEB \xEC \xED \xEE \xEF \xF0 \xF1 \xF2 \xF3 \xF4 \xF5 \xF6 \
          \xF7 \xF8 \xF9 \xFA \xFB \xFC \xFD \xFE \xFF]
    }
  }
}

proc getStringIsAnyResult { class value } {
  set length [string length $value]

  for {set index 0} {$index < $length} {incr index} {
    if {[string is $class -strict \
        [string index $value $index]]} then {
      return true
    }
  }

  return false
}

proc getStringIsResults { channel class } {
  set results [list]

  set totals(true) 0
  set totals(false) 0

  set result [string is $class ""]
  # if {$result} then {incr totals(true)} else {incr totals(false)}
  lappend results empty [expr {int($result)}]

  set result [string is $class -strict ""]
  # if {$result} then {incr totals(true)} else {incr totals(false)}
  lappend results strict [expr {int($result)}]

  foreach value [getStringIsValues $class] {
    set name $value

    if {[array exists ::refs]} then {
      foreach ref [array names ::refs] {
        if {$name eq $::refs($ref) && \
            ![info exists ::refs(${ref}_used)]} then {
          set ::refs(${ref}_used) 1; # NOTE: Once per test.
          if {[info exists ::refs(${ref}_alias)]} then {
            set name [appendArgs <refs( $::refs(${ref}_alias) )>]
          } else {
            set name [appendArgs <refs( $ref )>]
          }
        }
      }
    }

    if {$name eq $value && \
        [string length $name] == 1} then {; # single char test?
      if {[isEagle]} then {
        set ordinal [string ordinal $name 0]
      } else {
        scan $name %c ordinal
      }

      if {$ordinal <= 32 || $ordinal >= 127} then {; # bad ASCII?
        set name [appendArgs \\x [format %02X $ordinal]]
      }
    }

    set result [string is $class $value]
    if {$result} then {incr totals(true)} else {incr totals(false)}

    if {[isEagle]} then {; # check opposite, e.g. [string is not], etc.
      if {[catch {string is not alpha abc}] == 0} then {
        set expr {$class in [getStringIsClasses character]}

        if {[expr $expr]} then {
          set anyResult(1) [string is $class -any false $value]
          set anyResult(2) $result

          if {$anyResult(1) != $anyResult(2)} then {
            error [appendArgs \
                "failed test of \[string is " $class " -any false \{" \
                $value "\}\], got: " $anyResult(1) ", wanted: " \
                $anyResult(2)]
          }

          set anyResult(1) [string is $class -any true $value]
          set anyResult(2) [getStringIsAnyResult $class $value]

          if {$anyResult(1) != $anyResult(2)} then {
            error [appendArgs \
                "failed test of \[string is " $class " -any true \{" \
                $value "\}\], got: " $anyResult(1) ", wanted: " \
                $anyResult(2)]
          }
        }

        set notResult(1) [string is not $class $value]
        set notResult(2) [expr {!$result}]

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is not " $class " \{" $value \
              "\}\], got: " $notResult(1) ", wanted: " $notResult(2)]
        }

        set notResult(1) [string is not not $class $value]
        set notResult(2) $result

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is not not " $class " \{" $value \
              "\}\], got: " $notResult(1) ", wanted: " $notResult(2)]
        }

        set notResult(1) [string is $class -not false $value]
        set notResult(2) $result

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is " $class " -not false \{" \
              $value "\}\], got: " $notResult(1) ", wanted: " \
              $notResult(2)]
        }

        set notResult(1) [string is not $class -not false $value]
        set notResult(2) $result

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is " $class " -not false \{" \
              $value "\}\], got: " $notResult(1) ", wanted: " \
              $notResult(2)]
        }

        set notResult(1) [string is $class -not true $value]
        set notResult(2) [expr {!$result}]

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is " $class " -not true \{" \
              $value "\}\], got: " $notResult(1) ", wanted: " \
              $notResult(2)]
        }

        set notResult(1) [string is not $class -not true $value]
        set notResult(2) [expr {!$result}]

        if {$notResult(1) != $notResult(2)} then {
          error [appendArgs \
              "failed test of \[string is " $class " -not true \{" \
              $value "\}\], got: " $notResult(1) ", wanted: " \
              $notResult(2)]
        }
      } else {
        tputs $channel \
            "---- sub-command \[string is not\] unavailable, skipping...\n"
      }
    }

    lappend results $name [expr {int($result)}]
  }

  tputs $channel [appendArgs \
      "---- result totals for \[string is " $class "\]: " \
      [testArrayGet totals false] \n]

  return $results
}

###############################################################################

runTest {test string-99.200 {string is boolean} -body {
  getStringIsResults $test_channel boolean
} -result {empty 1 strict 0 null 0 true 1 false 1 abc 0 ABC 0 0xDEAD 0 0xC0FFEE\
0 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0 -1.7976931348623157E+308 0\
-3.40282347E+38 0 -79228162514264337593543950335 0 -9223372036854775808 0\
-2147483648 0 -32768 0 -128 0 -1 0 -0x0 0 0 1 0x0 0 1 1 0x1 0 127 0 0xFF 0\
0x100 0 32767 0 65535 0 2147483647 0 4294967295 0 9223372036854775807 0\
18446744073709551615 0 79228162514264337593543950335 0 3.40282347E+38 0\
1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.201 {string is true} -body {
  getStringIsResults $test_channel true
} -result {empty 1 strict 0 null 0 true 1 false 0 abc 0 ABC 0 0xDEAD 0 0xC0FFEE\
0 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0 -1.7976931348623157E+308 0\
-3.40282347E+38 0 -79228162514264337593543950335 0 -9223372036854775808 0\
-2147483648 0 -32768 0 -128 0 -1 0 -0x0 0 0 0 0x0 0 1 1 0x1 0 127 0 0xFF 0\
0x100 0 32767 0 65535 0 2147483647 0 4294967295 0 9223372036854775807 0\
18446744073709551615 0 79228162514264337593543950335 0 3.40282347E+38 0\
1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.202 {string is false} -body {
  getStringIsResults $test_channel false
} -result {empty 1 strict 0 null 0 true 0 false 1 abc 0 ABC 0 0xDEAD 0 0xC0FFEE\
0 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0 -1.7976931348623157E+308 0\
-3.40282347E+38 0 -79228162514264337593543950335 0 -9223372036854775808 0\
-2147483648 0 -32768 0 -128 0 -1 0 -0x0 0 0 1 0x0 0 1 0 0x1 0 127 0 0xFF 0\
0x100 0 32767 0 65535 0 2147483647 0 4294967295 0 9223372036854775807 0\
18446744073709551615 0 79228162514264337593543950335 0 3.40282347E+38 0\
1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.203 {string is double} -body {
  getStringIsResults $test_channel double
} -constraints {tcl85Feature} -result {empty 1 strict 0 null 0 true 0 false 0\
abc 0 ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0\
{$} 0 -1.7976931348623157E+308 1 -3.40282347E+38 1\
-79228162514264337593543950335 1 -9223372036854775808 1 -2147483648 1 -32768 1\
-128 1 -1 1 -0x0 1 0 1 0x0 1 1 1 0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1\
2147483647 1 4294967295 1 9223372036854775807 1 18446744073709551615 1\
79228162514264337593543950335 1 3.40282347E+38 1 1.7976931348623157E+308 1}}

###############################################################################

#
# BUGBUG: Recent releases of native Tcl 8.6 (?) may exhibit a serious bug
#         here, as follows:
#
#         set class integer
#         set value 18446744073709551615
#         string is $class $value; # should be 0
#
#         The above returned "1" using Tcl 8.6.5 running on Linux x86_64.
#
runTest {test string-99.204 {string is integer} -body {
  getStringIsResults $test_channel integer
} -constraints {tclBug86} -result {empty 1 strict 0 null 0 true 0 false 0 abc 0\
ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 0 -3.40282347E+38 0 -79228162514264337593543950335 0\
-9223372036854775808 0 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 0 18446744073709551615 0 79228162514264337593543950335 0\
3.40282347E+38 0 1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.205 {string is wideinteger} -body {
  getStringIsResults $test_channel wideinteger
} -constraints {tcl85Feature} -result {empty 1 strict 0 null 0 true 0 false 0\
abc 0 ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0\
{$} 0 -1.7976931348623157E+308 0 -3.40282347E+38 0\
-79228162514264337593543950335 0 -9223372036854775808 1 -2147483648 1 -32768 1\
-128 1 -1 1 -0x0 1 0 1 0x0 1 1 1 0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1\
2147483647 1 4294967295 1 9223372036854775807 1 18446744073709551615 1\
79228162514264337593543950335 0 3.40282347E+38 0 1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.206 {string is byte} -body {
  getStringIsResults $test_channel byte
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 0 false 0 abc 0\
ABC 0 0xDEAD 0 0xC0FFEE 0 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 0 -3.40282347E+38 0 -79228162514264337593543950335 0\
-9223372036854775808 0 -2147483648 0 -32768 0 -128 0 -1 0 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 0 32767 0 65535 0 2147483647 0 4294967295 0\
9223372036854775807 0 18446744073709551615 0 79228162514264337593543950335 0\
3.40282347E+38 0 1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.207 {string is decimal} -body {
  getStringIsResults $test_channel decimal
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 0 false 0 abc 0\
ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 0 -3.40282347E+38 0 -79228162514264337593543950335 1\
-9223372036854775808 1 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 1 18446744073709551615 1 79228162514264337593543950335 1\
3.40282347E+38 0 1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.208 {string is none} -body {
  getStringIsResults $test_channel none
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 0 false 0 abc 0\
ABC 0 0xDEAD 0 0xC0FFEE 0 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 0 -3.40282347E+38 0 -79228162514264337593543950335 0\
-9223372036854775808 0 -2147483648 0 -32768 0 -128 0 -1 1 -0x0 0 0 0 0x0 0 1 0\
0x1 0 127 0 0xFF 0 0x100 0 32767 0 65535 0 2147483647 0 4294967295 0\
9223372036854775807 0 18446744073709551615 0 79228162514264337593543950335 0\
3.40282347E+38 0 1.7976931348623157E+308 0}}

###############################################################################

runTest {test string-99.209 {string is numeric} -body {
  getStringIsResults $test_channel numeric
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 1 false 1 abc 0\
ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 1 -3.40282347E+38 1 -79228162514264337593543950335 1\
-9223372036854775808 1 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 1 18446744073709551615 1 79228162514264337593543950335 1\
3.40282347E+38 1 1.7976931348623157E+308 1}}

###############################################################################

runTest {test string-99.210 {string is number} -body {
  getStringIsResults $test_channel number
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 1 false 1 abc 0\
ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 1 -3.40282347E+38 1 -79228162514264337593543950335 1\
-9223372036854775808 1 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 1 18446744073709551615 1 79228162514264337593543950335 1\
3.40282347E+38 1 1.7976931348623157E+308 1}}

###############################################################################

runTest {test string-99.211 {string is value} -body {
  getStringIsResults $test_channel value
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 1 false 1 abc 0\
ABC 0 0xDEAD 1 0xC0FFEE 1 abz 0 ABZ 0 __ 0 0_ 0 _0 0 # 0 . 0 \{ 0 \} 0 {$} 0\
-1.7976931348623157E+308 1 -3.40282347E+38 1 -79228162514264337593543950335 1\
-9223372036854775808 1 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 1 18446744073709551615 1 79228162514264337593543950335 1\
3.40282347E+38 1 1.7976931348623157E+308 1 {OCT 21 2015 11:29 PM +0000} 1\
0.00:00:00.00 1 00000000-0000-0000-0000-000000000000 1}}

###############################################################################

runTest {test string-99.212 {string is variant} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel variant
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 null 1 true 1 false 1 abc 1\
ABC 1 0xDEAD 1 0xC0FFEE 1 abz 1 ABZ 1 __ 1 0_ 1 _0 1 # 1 . 1 \{ 1 \} 1 {$} 1\
-1.7976931348623157E+308 1 -3.40282347E+38 1 -79228162514264337593543950335 1\
-9223372036854775808 1 -2147483648 1 -32768 1 -128 1 -1 1 -0x0 1 0 1 0x0 1 1 1\
0x1 1 127 1 0xFF 1 0x100 1 32767 1 65535 1 2147483647 1 4294967295 1\
9223372036854775807 1 18446744073709551615 1 79228162514264337593543950335 1\
3.40282347E+38 1 1.7976931348623157E+308 1 {OCT 21 2015 11:29 PM +0000} 1\
0.00:00:00.00 1 00000000-0000-0000-0000-000000000000 1 <refs(17X)> 1 SomeString\
1}}

###############################################################################

runTest {test string-99.300 {string is alnum} -body {
  getStringIsResults $test_channel alnum
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 1 B 1\
C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1\
W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1\
j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 1 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 1 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 1 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 1 {\xC1} 1 {\xC2}\
1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1\
{\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3}\
1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 0 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1\
{\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4}\
1 {\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1\
{\xED} 1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5}\
1 {\xF6} 1 {\xF7} 0 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1\
{\xFE} 1 {\xFF} 1}}

###############################################################################

runTest {test string-99.301 {string is alpha} -body {
  getStringIsResults $test_channel alpha
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 1 B 1\
C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1\
W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1\
j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 1 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 1 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 1 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 1 {\xC1} 1 {\xC2}\
1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1\
{\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3}\
1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 0 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1\
{\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4}\
1 {\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1\
{\xED} 1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5}\
1 {\xF6} 1 {\xF7} 0 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1\
{\xFE} 1 {\xFF} 1}}

###############################################################################

runTest {test string-99.302 {string is ascii} -body {
  getStringIsResults $test_channel ascii
} -constraints {tclBug84} -result {empty 1 strict 0 {\x00} 1 {\x01} 1 {\x02} 1\
{\x03} 1 {\x04} 1 {\x05} 1 {\x06} 1 {\x07} 1 {\x08} 1 {\x09} 1 {\x0A} 1 {\x0B}\
1 {\x0C} 1 {\x0D} 1 {\x0E} 1 {\x0F} 1 {\x10} 1 {\x11} 1 {\x12} 1 {\x13} 1\
{\x14} 1 {\x15} 1 {\x16} 1 {\x17} 1 {\x18} 1 {\x19} 1 {\x1A} 1 {\x1B} 1 {\x1C}\
1 {\x1D} 1 {\x1E} 1 {\x1F} 1 {\x20} 1 ! 1 {"} 1 # 1 {$} 1 % 1 & 1 ' 1 ( 1 ) 1 *\
1 + 1 , 1 - 1 . 1 / 1 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 1 {;} 1 < 1 = 1\
> 1 ? 1 @ 1 A 1 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1\
R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1 {[} 1 \\ 1 \] 1 ^ 1 _ 1 ` 1 a 1 b 1 c 1 d 1\
e 1 f 1 g 1 h 1 i 1 j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1\
y 1 z 1 \{ 1 | 1 \} 1 ~ 1 {\x7F} 1 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00AD is not a control character.
#
runTest {test string-99.303 {string is control} -body {
  getStringIsResults $test_channel control
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 1 {\x01} 1 {\x02} 1\
{\x03} 1 {\x04} 1 {\x05} 1 {\x06} 1 {\x07} 1 {\x08} 1 {\x09} 1 {\x0A} 1 {\x0B}\
1 {\x0C} 1 {\x0D} 1 {\x0E} 1 {\x0F} 1 {\x10} 1 {\x11} 1 {\x12} 1 {\x13} 1\
{\x14} 1 {\x15} 1 {\x16} 1 {\x17} 1 {\x18} 1 {\x19} 1 {\x1A} 1 {\x1B} 1 {\x1C}\
1 {\x1D} 1 {\x1E} 1 {\x1F} 1 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0\
> 0 ? 0 @ 0 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 0 b 0 c 0 d 0\
e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 0 | 0 \} 0 ~ 0 {\x7F} 1 {\x80} 1 {\x81} 1 {\x82} 1 {\x83} 1 {\x84} 1\
{\x85} 1 {\x86} 1 {\x87} 1 {\x88} 1 {\x89} 1 {\x8A} 1 {\x8B} 1 {\x8C} 1 {\x8D}\
1 {\x8E} 1 {\x8F} 1 {\x90} 1 {\x91} 1 {\x92} 1 {\x93} 1 {\x94} 1 {\x95} 1\
{\x96} 1 {\x97} 1 {\x98} 1 {\x99} 1 {\x9A} 1 {\x9B} 1 {\x9C} 1 {\x9D} 1 {\x9E}\
1 {\x9F} 1 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.304 {string is digit} -body {
  getStringIsResults $test_channel digit
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 0 B 0\
C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0 R 0 S 0 T 0 U 0 V 0\
W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 0 b 0 c 0 d 0 e 0 f 0 g 0 h 0 i 0\
j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0 y 0 z 0 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 0 {\xC1} 0 {\xC2}\
0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0 {\xC9} 0 {\xCA} 0\
{\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1} 0 {\xD2} 0 {\xD3}\
0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0 {\xDA} 0 {\xDB} 0\
{\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2} 0 {\xE3} 0 {\xE4}\
0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0 {\xEB} 0 {\xEC} 0\
{\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3} 0 {\xF4} 0 {\xF5}\
0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0 {\xFC} 0 {\xFD} 0\
{\xFE} 0 {\xFF} 0}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00AD is a graph character.
#
runTest {test string-99.305.1 {string is graph} -body {
  getStringIsResults $test_channel graph
} -constraints {unicodeCategory_U00AD_Pd} -result {empty 1 strict 0 {\x00} 0\
{\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09}\
0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0\
{\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A}\
0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 1 {"} 1 # 1 {$} 1 % 1\
& 1 ' 1 ( 1 ) 1 * 1 + 1 , 1 - 1 . 1 / 1 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1\
: 1 {;} 1 < 1 = 1 > 1 ? 1 @ 1 A 1 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M\
1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1 {[} 1 \\ 1 \] 1 ^ 1 _ 1 `\
1 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t\
1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 1 | 1 \} 1 ~ 1 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0\
{\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B}\
0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0\
{\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C}\
0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 0 {\xA1} 1 {\xA2} 1 {\xA3} 1 {\xA4} 1\
{\xA5} 1 {\xA6} 1 {\xA7} 1 {\xA8} 1 {\xA9} 1 {\xAA} 1 {\xAB} 1 {\xAC} 1 {\xAD}\
1 {\xAE} 1 {\xAF} 1 {\xB0} 1 {\xB1} 1 {\xB2} 1 {\xB3} 1 {\xB4} 1 {\xB5} 1\
{\xB6} 1 {\xB7} 1 {\xB8} 1 {\xB9} 1 {\xBA} 1 {\xBB} 1 {\xBC} 1 {\xBD} 1 {\xBE}\
1 {\xBF} 1 {\xC0} 1 {\xC1} 1 {\xC2} 1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1\
{\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1 {\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF}\
1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3} 1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 1\
{\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1 {\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0}\
1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1 {\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1\
{\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED} 1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1}\
1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1 {\xF6} 1 {\xF7} 1 {\xF8} 1 {\xF9} 1\
{\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE} 1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00AD is a graph character.
#
runTest {test string-99.305.2 {string is graph} -body {
  getStringIsResults $test_channel graph
} -constraints {unicodeCategory_U00AD_Cf} -result {empty 1 strict 0 {\x00} 0\
{\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09}\
0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0\
{\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A}\
0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 1 {"} 1 # 1 {$} 1 % 1\
& 1 ' 1 ( 1 ) 1 * 1 + 1 , 1 - 1 . 1 / 1 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1\
: 1 {;} 1 < 1 = 1 > 1 ? 1 @ 1 A 1 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M\
1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1 {[} 1 \\ 1 \] 1 ^ 1 _ 1 `\
1 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t\
1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 1 | 1 \} 1 ~ 1 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0\
{\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B}\
0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0\
{\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C}\
0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 0 {\xA1} 1 {\xA2} 1 {\xA3} 1 {\xA4} 1\
{\xA5} 1 {\xA6} 1 {\xA7} 1 {\xA8} 1 {\xA9} 1 {\xAA} 1 {\xAB} 1 {\xAC} 1 {\xAD}\
0 {\xAE} 1 {\xAF} 1 {\xB0} 1 {\xB1} 1 {\xB2} 1 {\xB3} 1 {\xB4} 1 {\xB5} 1\
{\xB6} 1 {\xB7} 1 {\xB8} 1 {\xB9} 1 {\xBA} 1 {\xBB} 1 {\xBC} 1 {\xBD} 1 {\xBE}\
1 {\xBF} 1 {\xC0} 1 {\xC1} 1 {\xC2} 1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1\
{\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1 {\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF}\
1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3} 1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 1\
{\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1 {\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0}\
1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1 {\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1\
{\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED} 1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1}\
1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1 {\xF6} 1 {\xF7} 1 {\xF8} 1 {\xF9} 1\
{\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE} 1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00AA is a lowercase letter.
#
runTest {test string-99.306.1 {string is lower} -body {
  getStringIsResults $test_channel lower
} -constraints {unicodeCategory_U00AA_Ll unicodeCategory_U00BA_Ll} -result \
{empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0 {\x06}\
0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0 {\x0E} 0\
{\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0 {\x17}\
0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F} 0\
{\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 / 0 0 0 1\
0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 0 B 0 C 0 D 0\
E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0 R 0 S 0 T 0 U 0 V 0 W 0 X 0\
Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k 1\
l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 0 | 0 \} 0 ~ 0\
{\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0 {\x87}\
0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0\
{\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98}\
0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 0\
{\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0 {\xA9}\
0 {\xAA} 1 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1} 0\
{\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 1 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0 {\xBA}\
1 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 0 {\xC1} 0 {\xC2} 0\
{\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0 {\xC9} 0 {\xCA} 0 {\xCB}\
0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1} 0 {\xD2} 0 {\xD3} 0\
{\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0 {\xDA} 0 {\xDB} 0 {\xDC}\
0 {\xDD} 0 {\xDE} 0 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1\
{\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED}\
1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1\
{\xF6} 1 {\xF7} 0 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE}\
1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00AA is a lowercase letter.
#
runTest {test string-99.306.2 {string is lower} -body {
  getStringIsResults $test_channel lower
} -constraints {unicodeCategory_U00AA_Lo unicodeCategory_U00BA_Lo} -result \
{empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0 {\x06}\
0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0 {\x0E} 0\
{\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0 {\x17}\
0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F} 0\
{\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 / 0 0 0 1\
0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 0 B 0 C 0 D 0\
E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0 R 0 S 0 T 0 U 0 V 0 W 0 X 0\
Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k 1\
l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 0 | 0 \} 0 ~ 0\
{\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0 {\x87}\
0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0\
{\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98}\
0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 0\
{\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0 {\xA9}\
0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1} 0\
{\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 1 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0 {\xBA}\
0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 0 {\xC1} 0 {\xC2} 0\
{\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0 {\xC9} 0 {\xCA} 0 {\xCB}\
0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1} 0 {\xD2} 0 {\xD3} 0\
{\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0 {\xDA} 0 {\xDB} 0 {\xDC}\
0 {\xDD} 0 {\xDE} 0 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1\
{\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED}\
1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1\
{\xF6} 1 {\xF7} 0 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE}\
1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+0009 is a printable character.
#
runTest {test string-99.307.1 {string is print} -body {
  getStringIsResults $test_channel print
} -constraints {eagle unicodeCategory_U00AA_Ll unicodeCategory_U00AD_Pd} \
-result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0\
{\x06} 0 {\x07} 0 {\x08} 0 {\x09} 1 {\x0A} 1 {\x0B} 1 {\x0C} 1 {\x0D} 1 {\x0E}\
0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0\
{\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F}\
0 {\x20} 1 ! 1 {"} 1 # 1 {$} 1 % 1 & 1 ' 1 ( 1 ) 1 * 1 + 1 , 1 - 1 . 1 / 1 0 1\
1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 1 {;} 1 < 1 = 1 > 1 ? 1 @ 1 A 1 B 1 C 1 D\
1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X\
1 Y 1 Z 1 {[} 1 \\ 1 \] 1 ^ 1 _ 1 ` 1 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k\
1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 1 | 1 \} 1 ~ 1\
{\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 1 {\x86} 0 {\x87}\
0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0\
{\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98}\
0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 1\
{\xA1} 1 {\xA2} 1 {\xA3} 1 {\xA4} 1 {\xA5} 1 {\xA6} 1 {\xA7} 1 {\xA8} 1 {\xA9}\
1 {\xAA} 1 {\xAB} 1 {\xAC} 1 {\xAD} 1 {\xAE} 1 {\xAF} 1 {\xB0} 1 {\xB1} 1\
{\xB2} 1 {\xB3} 1 {\xB4} 1 {\xB5} 1 {\xB6} 1 {\xB7} 1 {\xB8} 1 {\xB9} 1 {\xBA}\
1 {\xBB} 1 {\xBC} 1 {\xBD} 1 {\xBE} 1 {\xBF} 1 {\xC0} 1 {\xC1} 1 {\xC2} 1\
{\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1 {\xCB}\
1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3} 1\
{\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 1 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1 {\xDC}\
1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1\
{\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED}\
1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1\
{\xF6} 1 {\xF7} 1 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE}\
1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+0009 is a printable character.
#
runTest {test string-99.307.2 {string is print} -body {
  getStringIsResults $test_channel print
} -constraints {eagle unicodeCategory_U00AA_Lo unicodeCategory_U00AD_Cf} \
-result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0\
{\x06} 0 {\x07} 0 {\x08} 0 {\x09} 1 {\x0A} 1 {\x0B} 1 {\x0C} 1 {\x0D} 1 {\x0E}\
0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0\
{\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F}\
0 {\x20} 1 ! 1 {"} 1 # 1 {$} 1 % 1 & 1 ' 1 ( 1 ) 1 * 1 + 1 , 1 - 1 . 1 / 1 0 1\
1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 1 {;} 1 < 1 = 1 > 1 ? 1 @ 1 A 1 B 1 C 1 D\
1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1 W 1 X\
1 Y 1 Z 1 {[} 1 \\ 1 \] 1 ^ 1 _ 1 ` 1 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1 j 1 k\
1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 1 | 1 \} 1 ~ 1\
{\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 1 {\x86} 0 {\x87}\
0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0\
{\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98}\
0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 1\
{\xA1} 1 {\xA2} 1 {\xA3} 1 {\xA4} 1 {\xA5} 1 {\xA6} 1 {\xA7} 1 {\xA8} 1 {\xA9}\
1 {\xAA} 1 {\xAB} 1 {\xAC} 1 {\xAD} 0 {\xAE} 1 {\xAF} 1 {\xB0} 1 {\xB1} 1\
{\xB2} 1 {\xB3} 1 {\xB4} 1 {\xB5} 1 {\xB6} 1 {\xB7} 1 {\xB8} 1 {\xB9} 1 {\xBA}\
1 {\xBB} 1 {\xBC} 1 {\xBD} 1 {\xBE} 1 {\xBF} 1 {\xC0} 1 {\xC1} 1 {\xC2} 1\
{\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1 {\xCB}\
1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3} 1\
{\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 1 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1 {\xDC}\
1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4} 1\
{\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1 {\xED}\
1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5} 1\
{\xF6} 1 {\xF7} 1 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1 {\xFE}\
1 {\xFF} 1}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00A7 is a punctuation character.
#
runTest {test string-99.308.1 {string is punct} -body {
  getStringIsResults $test_channel punct
} -constraints {unicodeCategory_U00A7_So unicodeCategory_U00AD_Pd\
unicodeCategory_U00B6_So} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 1 {"} 1 # 1 {$} 0 % 1 & 1 ' 1 ( 1 ) 1 *\
1 + 0 , 1 - 1 . 1 / 1 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 1 {;} 1 < 0 = 0\
> 0 ? 1 @ 1 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 1 \\ 1 \] 1 ^ 0 _ 1 ` 0 a 0 b 0 c 0 d 0\
e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 1 | 0 \} 1 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 1 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 1 {\xAC} 0 {\xAD} 1 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 1\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 1 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 1 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

#
# HACK: Apparently, native Tcl is not quite Unicode compliant for character
#       classes, e.g. U+00A7 is a punctuation character.
#
runTest {test string-99.308.2 {string is punct} -body {
  getStringIsResults $test_channel punct
} -constraints {unicodeCategory_U00A7_Po unicodeCategory_U00AD_Cf\
unicodeCategory_U00B6_Po} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 1 {"} 1 # 1 {$} 0 % 1 & 1 ' 1 ( 1 ) 1 *\
1 + 0 , 1 - 1 . 1 / 1 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 1 {;} 1 < 0 = 0\
> 0 ? 1 @ 1 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 1 \\ 1 \] 1 ^ 0 _ 1 ` 0 a 0 b 0 c 0 d 0\
e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 1 | 0 \} 1 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 1 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 1 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 1 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 1 {\xB7} 1\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 1 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 1 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.309 {string is space} -body {
  getStringIsResults $test_channel space
} -constraints {tclBug84 tclBug85} -result {empty 1 strict 0 {\x00} 0 {\x01} 0\
{\x02} 0 {\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 1 {\x0A}\
1 {\x0B} 1 {\x0C} 1 {\x0D} 1 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0\
{\x13} 0 {\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B}\
0 {\x1C} 0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 1 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0\
( 0 ) 0 * 0 + 0 , 0 - 0 . 0 / 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;}\
0 < 0 = 0 > 0 ? 0 @ 0 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O\
0 P 0 Q 0 R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 0 b\
0 c 0 d 0 e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v\
0 w 0 x 0 y 0 z 0 \{ 0 | 0 \} 0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83}\
0 {\x84} 0 {\x85} 1 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0\
{\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94}\
0 {\x95} 0 {\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0\
{\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0} 1 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5}\
0 {\xA6} 0 {\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0\
{\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6}\
0 {\xB7} 0 {\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0\
{\xBF} 0 {\xC0} 0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7}\
0 {\xC8} 0 {\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0\
{\xD0} 0 {\xD1} 0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8}\
0 {\xD9} 0 {\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0\
{\xE1} 0 {\xE2} 0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9}\
0 {\xEA} 0 {\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0\
{\xF2} 0 {\xF3} 0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA}\
0 {\xFB} 0 {\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.310 {string is upper} -body {
  getStringIsResults $test_channel upper
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 1 B 1\
C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1\
W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 0 b 0 c 0 d 0 e 0 f 0 g 0 h 0 i 0\
j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0 y 0 z 0 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 1 {\xC1} 1 {\xC2}\
1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1\
{\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3}\
1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 0 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1\
{\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2} 0 {\xE3} 0 {\xE4}\
0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0 {\xEB} 0 {\xEC} 0\
{\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3} 0 {\xF4} 0 {\xF5}\
0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0 {\xFC} 0 {\xFD} 0\
{\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.311 {string is wordchar} -body {
  getStringIsResults $test_channel wordchar
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 1 B 1\
C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1 R 1 S 1 T 1 U 1 V 1\
W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 1 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 1 h 1 i 1\
j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1 y 1 z 1 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 1 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 1 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 1 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 1 {\xC1} 1 {\xC2}\
1 {\xC3} 1 {\xC4} 1 {\xC5} 1 {\xC6} 1 {\xC7} 1 {\xC8} 1 {\xC9} 1 {\xCA} 1\
{\xCB} 1 {\xCC} 1 {\xCD} 1 {\xCE} 1 {\xCF} 1 {\xD0} 1 {\xD1} 1 {\xD2} 1 {\xD3}\
1 {\xD4} 1 {\xD5} 1 {\xD6} 1 {\xD7} 0 {\xD8} 1 {\xD9} 1 {\xDA} 1 {\xDB} 1\
{\xDC} 1 {\xDD} 1 {\xDE} 1 {\xDF} 1 {\xE0} 1 {\xE1} 1 {\xE2} 1 {\xE3} 1 {\xE4}\
1 {\xE5} 1 {\xE6} 1 {\xE7} 1 {\xE8} 1 {\xE9} 1 {\xEA} 1 {\xEB} 1 {\xEC} 1\
{\xED} 1 {\xEE} 1 {\xEF} 1 {\xF0} 1 {\xF1} 1 {\xF2} 1 {\xF3} 1 {\xF4} 1 {\xF5}\
1 {\xF6} 1 {\xF7} 0 {\xF8} 1 {\xF9} 1 {\xFA} 1 {\xFB} 1 {\xFC} 1 {\xFD} 1\
{\xFE} 1 {\xFF} 1}}

###############################################################################

runTest {test string-99.312 {string is xdigit} -body {
  getStringIsResults $test_channel xdigit
} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0 {\x03} 0 {\x04} 0 {\x05}\
0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B} 0 {\x0C} 0 {\x0D} 0\
{\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0 {\x14} 0 {\x15} 0 {\x16}\
0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C} 0 {\x1D} 0 {\x1E} 0\
{\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 * 0 + 0 , 0 - 0 . 0 /\
0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0 > 0 ? 0 @ 0 A 1 B 1\
C 1 D 1 E 1 F 1 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0 R 0 S 0 T 0 U 0 V 0\
W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1 e 1 f 1 g 0 h 0 i 0\
j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0 y 0 z 0 \{ 0 | 0 \}\
0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0 {\x85} 0 {\x86} 0\
{\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D} 0 {\x8E} 0 {\x8F}\
0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0 {\x96} 0 {\x97} 0\
{\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E} 0 {\x9F} 0 {\xA0}\
0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0 {\xA7} 0 {\xA8} 0\
{\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF} 0 {\xB0} 0 {\xB1}\
0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0 {\xB8} 0 {\xB9} 0\
{\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0} 0 {\xC1} 0 {\xC2}\
0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0 {\xC9} 0 {\xCA} 0\
{\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1} 0 {\xD2} 0 {\xD3}\
0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0 {\xDA} 0 {\xDB} 0\
{\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2} 0 {\xE3} 0 {\xE4}\
0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0 {\xEB} 0 {\xEC} 0\
{\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3} 0 {\xF4} 0 {\xF5}\
0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0 {\xFC} 0 {\xFD} 0\
{\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.313 {string is asciialnum} -body {
  getStringIsResults $test_channel asciialnum
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0\
> 0 ? 0 @ 0 A 1 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1\
R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1\
e 1 f 1 g 1 h 1 i 1 j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1\
y 1 z 1 \{ 0 | 0 \} 0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.314 {string is asciialpha} -body {
  getStringIsResults $test_channel asciialpha
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 0 < 0 = 0\
> 0 ? 0 @ 0 A 1 B 1 C 1 D 1 E 1 F 1 G 1 H 1 I 1 J 1 K 1 L 1 M 1 N 1 O 1 P 1 Q 1\
R 1 S 1 T 1 U 1 V 1 W 1 X 1 Y 1 Z 1 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1\
e 1 f 1 g 1 h 1 i 1 j 1 k 1 l 1 m 1 n 1 o 1 p 1 q 1 r 1 s 1 t 1 u 1 v 1 w 1 x 1\
y 1 z 1 \{ 0 | 0 \} 0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.315 {string is asciidigit} -body {
  getStringIsResults $test_channel asciidigit
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0\
> 0 ? 0 @ 0 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 0 b 0 c 0 d 0\
e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 0 | 0 \} 0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.316 {string is hexadecimal} -body {
  getStringIsResults $test_channel hexadecimal
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 0 {"} 0 # 0 {$} 0 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 : 0 {;} 0 < 0 = 0\
> 0 ? 0 @ 0 A 1 B 1 C 1 D 1 E 1 F 1 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 0 \\ 0 \] 0 ^ 0 _ 0 ` 0 a 1 b 1 c 1 d 1\
e 1 f 1 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 0 | 0 \} 0 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.317 {string is reserved} -body {
  getStringIsResults $test_channel reserved
} -constraints {eagle} -result {empty 1 strict 0 {\x00} 0 {\x01} 0 {\x02} 0\
{\x03} 0 {\x04} 0 {\x05} 0 {\x06} 0 {\x07} 0 {\x08} 0 {\x09} 0 {\x0A} 0 {\x0B}\
0 {\x0C} 0 {\x0D} 0 {\x0E} 0 {\x0F} 0 {\x10} 0 {\x11} 0 {\x12} 0 {\x13} 0\
{\x14} 0 {\x15} 0 {\x16} 0 {\x17} 0 {\x18} 0 {\x19} 0 {\x1A} 0 {\x1B} 0 {\x1C}\
0 {\x1D} 0 {\x1E} 0 {\x1F} 0 {\x20} 0 ! 0 {"} 1 # 1 {$} 1 % 0 & 0 ' 0 ( 0 ) 0 *\
0 + 0 , 0 - 0 . 0 / 0 0 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 : 0 {;} 1 < 0 = 0\
> 0 ? 0 @ 0 A 0 B 0 C 0 D 0 E 0 F 0 G 0 H 0 I 0 J 0 K 0 L 0 M 0 N 0 O 0 P 0 Q 0\
R 0 S 0 T 0 U 0 V 0 W 0 X 0 Y 0 Z 0 {[} 1 \\ 1 \] 1 ^ 0 _ 0 ` 0 a 0 b 0 c 0 d 0\
e 0 f 0 g 0 h 0 i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0\
y 0 z 0 \{ 1 | 0 \} 1 ~ 0 {\x7F} 0 {\x80} 0 {\x81} 0 {\x82} 0 {\x83} 0 {\x84} 0\
{\x85} 0 {\x86} 0 {\x87} 0 {\x88} 0 {\x89} 0 {\x8A} 0 {\x8B} 0 {\x8C} 0 {\x8D}\
0 {\x8E} 0 {\x8F} 0 {\x90} 0 {\x91} 0 {\x92} 0 {\x93} 0 {\x94} 0 {\x95} 0\
{\x96} 0 {\x97} 0 {\x98} 0 {\x99} 0 {\x9A} 0 {\x9B} 0 {\x9C} 0 {\x9D} 0 {\x9E}\
0 {\x9F} 0 {\xA0} 0 {\xA1} 0 {\xA2} 0 {\xA3} 0 {\xA4} 0 {\xA5} 0 {\xA6} 0\
{\xA7} 0 {\xA8} 0 {\xA9} 0 {\xAA} 0 {\xAB} 0 {\xAC} 0 {\xAD} 0 {\xAE} 0 {\xAF}\
0 {\xB0} 0 {\xB1} 0 {\xB2} 0 {\xB3} 0 {\xB4} 0 {\xB5} 0 {\xB6} 0 {\xB7} 0\
{\xB8} 0 {\xB9} 0 {\xBA} 0 {\xBB} 0 {\xBC} 0 {\xBD} 0 {\xBE} 0 {\xBF} 0 {\xC0}\
0 {\xC1} 0 {\xC2} 0 {\xC3} 0 {\xC4} 0 {\xC5} 0 {\xC6} 0 {\xC7} 0 {\xC8} 0\
{\xC9} 0 {\xCA} 0 {\xCB} 0 {\xCC} 0 {\xCD} 0 {\xCE} 0 {\xCF} 0 {\xD0} 0 {\xD1}\
0 {\xD2} 0 {\xD3} 0 {\xD4} 0 {\xD5} 0 {\xD6} 0 {\xD7} 0 {\xD8} 0 {\xD9} 0\
{\xDA} 0 {\xDB} 0 {\xDC} 0 {\xDD} 0 {\xDE} 0 {\xDF} 0 {\xE0} 0 {\xE1} 0 {\xE2}\
0 {\xE3} 0 {\xE4} 0 {\xE5} 0 {\xE6} 0 {\xE7} 0 {\xE8} 0 {\xE9} 0 {\xEA} 0\
{\xEB} 0 {\xEC} 0 {\xED} 0 {\xEE} 0 {\xEF} 0 {\xF0} 0 {\xF1} 0 {\xF2} 0 {\xF3}\
0 {\xF4} 0 {\xF5} 0 {\xF6} 0 {\xF7} 0 {\xF8} 0 {\xF9} 0 {\xFA} 0 {\xFB} 0\
{\xFC} 0 {\xFD} 0 {\xFE} 0 {\xFF} 0}}

###############################################################################

runTest {test string-99.400 {string is directory} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel directory
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 . 0 .. 0 <refs(1X)> 0\
<refs(2X)> 1 <refs(3X)> 1 <refs(4X)> 1}}

###############################################################################

runTest {test string-99.401 {string is file} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel file
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 . 0 .. 0 <refs(1X)> 1\
<refs(2X)> 0 <refs(3X)> 0 <refs(4X)> 0}}

###############################################################################

runTest {test string-99.402 {string is path} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel path
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 . 1 .. 1 <refs(1X)> 1\
<refs(2X)> 1 <refs(3X)> 1 <refs(4X)> 1}}

###############################################################################

runTest {test string-99.403 {string is guid} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel guid
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle command.guid command.object} -result {empty 1 strict 0 -\
0 <refs(7X)> 0 <refs(6X)> 0 00000000-0000-0000-0000-000000000000 1 <refs(8X)> 1\
<refs(9X)> 1 <refs(10X)> 1 <refs(11X)> 1}}

###############################################################################

runTest {test string-99.404 {string is identifier} -body {
  getStringIsResults $test_channel identifier
} -constraints {eagle} -result {empty 1 strict 0 a 1 ab 1 _ab 1 1ab 0 ab1 1 _ 1\
{;} 0 : 0 \{ 0 \} 0 {[} 0 \] 0 () 0 {$} 0 {\x0D} 0 {\x0A} 0}}

###############################################################################

runTest {test string-99.405 {string is inetaddr} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel inetaddr
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle compile.NETWORK command.object} -result {empty 1 strict 0\
<refs(52X)> 1 <refs(53X)> 1 <refs(54X)> 1 <refs(55X)> 1 <refs(56X)> 1\
<refs(57X)> 1 <refs(58X)> 1 <refs(59X)> 1 <refs(60X)> 1 <refs(61X)> 1\
<refs(62X)> 1 <refs(63X)> 1 <refs(64X)> 1 <refs(65X)> 1 <refs(66X)> 0\
<refs(67X)> 0 <refs(68X)> 0 <refs(69X)> 1 <refs(70X)> 1 <refs(71X)> 1\
<refs(72X)> 0}}

###############################################################################

runTest {test string-99.406 {string is interpreter} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel interpreter
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle command.object} -result {empty 1 strict 0 1 1 0 0 -1 0\
<refs(6X)> 0}}

###############################################################################

runTest {test string-99.407 {string is object} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel object
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle command.object} -result {empty 1 strict 0 null 1 NULL 0\
<refs(12X)> 1 <refs(13X)> 1}}

###############################################################################

runTest {test string-99.408 {string is type} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel type
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 null 1 NULL 0 Interpreter 1\
StringList 1 Eagle._Interfaces.Public.IClientData 1 Random 1 Int32 1\
<refs(14X)> 1 String 1 System.Boolean 1 NotAType 0 Not.A.Type 0\
{System.Collections.Generic.IEnumerable`1[System.String]} 1}}

###############################################################################

runTest {test string-99.409 {string is uri} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel uri
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle command.object} -result {empty 1 strict 0 null 0\
<refs(16X)> 1 <refs(15X)> 1 file://one/two/three 1}}

###############################################################################

runTest {test string-99.410 {string is version} -body {
  getStringIsResults $test_channel version
} -constraints {eagle} -result {empty 1 strict 0 -1 0 0 0 1 0 1.0 1 1.1 1 1.0.0\
1 1.1.2 1 1.0.0.0 1 1.1.1.2 1 1.1.1.1.2 0}}

###############################################################################

runTest {test string-99.411 {string is xml} -body {
  getStringIsResults $test_channel xml
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle compile.XML file_settings.xml} -result {empty 1 strict 0\
null 0 true 0 false 0 -1 0 0 0 1 0 1.0 0 <refs(18X)> 1 <refs(19X)> 1\
<refs(20X)> 1 <refs(21X)> 0 <refs(22X)> 0 <refs(23X)> 1 <refs(24X)> 1}}

###############################################################################

runTest {test string-99.412 {string is plugin} -body {
  getStringIsResults $test_channel plugin
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 null 0 true 0 false 0 -1 0 0 0\
1 0 1.0 0 Eagle 1 Eagle* 1 Eagle.* 0 <refs(25X)> 1 <refs(26X)> 0}}

###############################################################################

runTest {test string-99.413 {string is base64} -body {
  getStringIsResults $test_channel base64
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 <refs(27X)> 0 <refs(28X)> 1\
<refs(29X)> 0 <refs(30X)> 0 <refs(31X)> 0 <refs(32X)> 0 <refs(33X)> 0}}

###############################################################################

runTest {test string-99.414 {string is encoding} -body {
  getStringIsResults $test_channel encoding
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle} -result {empty 1 strict 0 badenc 0 utf-6 0 utf-8 1 utf8\
0 UTF-8 1 utf-16 1 utf-32 1 utf-32BE 1 utf-32LE 1 utf-32ME 0 iso-8859-1 1\
iso-8859-99 0 us-ascii 1 null 0 binary 1 channelDefault 1 default 1\
systemDefault 1 tclDefault 1 textDefault 1 scriptDefault 1 xmlDefault 1\
Identity 1 OneByte 1 TwoByte 1 Tcl 1}}

###############################################################################

runTest {test string-99.415 {string is component} -setup {
  resetStringIsRefs
} -body {
  getStringIsResults $test_channel component
} -cleanup {
  unset -nocomplain refs; # NOTE: From getStringIsValues.
} -constraints {eagle windows} -result {empty 1 strict 0 . 1 .. 1 <refs(1X)> 0\
<refs(2X)> 0 <refs(3X)> 0 <refs(4X)> 0 <refs(34X)> 1 <refs(35X)> 1 <refs(36X)>\
1 <refs(37X)> 1 <refs(38X)> 1 <refs(39X)> 1 <refs(40X)> 1 <refs(41X)> 0\
<refs(42X)> 1 <refs(43X)> 1 <refs(44X)> 1 <refs(45X)> 1 <refs(46X)> 1\
<refs(47X)> 0 <refs(48X)> 1 <refs(49X)> 0 <refs(50X)> 1 <refs(51X)> 1}}

###############################################################################

runTest {test string-99.416 {string is versionrange} -body {
  getStringIsResults $test_channel versionrange
} -constraints {eagle} -result {empty 1 strict 0 good-bad 0 - 1 -1 0 -1.2 1\
-1.2.3 1 -1.2.3.4 1 -1.2.3.4.5 0 1- 0 1-1 0 1-1.2 0 1-1.2.3 0 1-1.2.3.4 0\
1-1.2.3.4.5 0 1.2-1 0 1.2.3-1 0 1.2.3.4-1 0 1.2.3.4.5-1 0 1-1.2 0 1-1.2.3 0\
1-1.2.3.4 0 1-1.2.3.4.5 0 1.2-1.2 1 1.2-1.2.3 1 1.2-1.2.3.4 1 1.2-1.2.3.4.5 0\
1.2.3-1.2 1 1.2.3-1.2.3 1 1.2.3-1.2.3.4 1 1.2.3-1.2.3.4.5 0 1.2.3.4-1 0\
1.2.3.4-1.2 1 1.2.3.4-1.2.3 1 1.2.3.4-1.2.3.4 1 1.2.3.4-1.2.3.4.5 0 1.2.3.4.5-1\
0 1.2.3.4.5-1.2 0 1.2.3.4.5-1.2.3 0 1.2.3.4.5-1.2.3.4 0 1.2.3.4.5-1.2.3.4.5 0}}

###############################################################################

rename resetStringIsRefs ""
rename getStringIsAnyResult ""
rename getStringIsResults ""
rename getStringIsValues ""
rename getStringIsClasses ""

###############################################################################

runTest {test string-99.500 {string classes} -body {
  lsort [string classes]
} -constraints {eagle} -result {alnum alpha array ascii asciialnum asciialpha\
asciidigit base64 boolean byte command component control datetime decimal dict\
digit directory double element encoding false file graph guid hexadecimal\
identifier inetaddr integer interpreter list lower none not number numeric\
object path plugin print punct real reserved scalar single space timespan true\
type upper uri value variant version versionrange wideinteger wordchar xdigit\
xml}}

###############################################################################

runTest {test string-100.1 {string cat, via TIP #429} -body {
  list [string cat] [string cat a] [string cat a b] \
      [string cat a b c] [string cat \\ a1 b2 c3 \\] \
      [string cat \{ a1 b2 c3 \}] [string cat \$ a1 b2 c3 \$]
} -constraints {tip429} -result {{} a ab abc \\a1b2c3\\ {{a1b2c3}} {$a1b2c3$}}}

###############################################################################

runTest {test string-101.1 {string match w/sub-patterns} -body {
  list [string match -mode +SubPattern "b{b,c}f" bbf] \
      [string match -mode +SubPattern "b{b,c}f" bcf] \
      [string match -mode +SubPattern "b{a,d}f" bbf] \
      [string match -mode +SubPattern "*b{b,c}f" fbbf] \
      [string match -mode +SubPattern "b{b,c}f*" bcfz] \
      [string match -mode +SubPattern "*b{b,c}f*" abcfz] \
      [string match -mode +SubPattern "a{1,2,3,\\,}z" a,z] \
      [string match -mode +SubPattern "f{{a,b,f},{o,a},{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f},{o,a},{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{{a,b,f}{o,a}{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f}{o,a}{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{{a,b,f}}{{o,a}}{{b,o}}o" foo] \
      [string match -mode +SubPattern "f{{a,b,f}}{{o,a}}{{b,o}}o" faobo] \
      [string match -mode +SubPattern "f{a,b,f}{o,a}{b,o}o" foo] \
      [string match -mode +SubPattern "f{a,b,f}{o,a}{b,o}o" faobo] \
      [string match -mode +SubPattern "b{}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{*}a{}r" bar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{??}a{}r" bear] \
      [string match -mode {+SubPattern EmptySubPattern} "b{**}a{}r" bear] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" boar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{?}a{}r" moar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{??}a{}r" moar] \
      [string match -mode {+SubPattern EmptySubPattern} "b{**}a{}r" moar]
} -constraints {eagle} -result {True True False True True True True True False\
False True False True False True False False True False True True False False\
False}}

###############################################################################

runTest {test encoding-100.0 {encoding system} -body {
  encoding system
} -constraints {eagle} -result {utf-16}}

###############################################################################

runTest {test encoding-100.1 {encoding names (built-in)} -setup {
  set names [encoding names]
} -body {
  list [expr {[haveConstraint dotNetCore50] || \
              [haveConstraint dotNetCore60] || \
              [haveConstraint dotNetCore70] || \
              [haveConstraint dotNetCore80] || \
          [lsearch -exact -- $names utf-7] != -1}] \
      [expr {[lsearch -exact -- $names utf-8] != -1}] \
      [expr {[lsearch -exact -- $names utf-16] != -1}] \
      [expr {[lsearch -exact -- $names binary] != -1}] \
      [expr {[lsearch -exact -- $names channelDefault] != -1}] \
      [expr {[lsearch -exact -- $names default] != -1}] \
      [expr {[lsearch -exact -- $names null] != -1}] \
      [expr {[lsearch -exact -- $names scriptDefault] != -1}] \
      [expr {[lsearch -exact -- $names systemDefault] != -1}] \
      [expr {[lsearch -exact -- $names tclDefault] != -1}] \
      [expr {[lsearch -exact -- $names textDefault] != -1}] \
      [expr {[lsearch -exact -- $names Identity] != -1}] \
      [expr {[lsearch -exact -- $names OneByte] != -1}] \
      [expr {[lsearch -exact -- $names TwoByte] != -1}] \
      [expr {[lsearch -exact -- $names Tcl] != -1}]
} -cleanup {
  unset -nocomplain names
} -constraints {eagle} -result \
{True True True True True True True True True True True True True True True}}

###############################################################################

runTest {test encoding-100.2 {encoding convertfrom} -body {
  encoding convertfrom utf-8 "\xc2\xa3"
} -result "\xa3"}

###############################################################################

runTest {test encoding-100.3 {encoding convertto} -body {
  encoding convertto utf-8 \xa3
} -result "\xc2\xa3"}

###############################################################################

runTest {test encoding-100.4 {encoding getstring} -body {
  set bytes [object create -alias Byte\[\] 256]
  for {set index 0} {$index < [$bytes Length]} {incr index} {
    set byte [object invoke -create Byte Parse $index]
    $bytes SetValue $byte $index
  }
  encoding getstring $bytes binary
} -cleanup {
  unset -nocomplain index byte bytes
} -constraints {eagle command.object} -result [appendArgs \
\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f \
\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f \
\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f \
\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f \
\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f \
\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f \
\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f \
\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f \
\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f \
\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f \
\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf \
\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf \
\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf \
\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf \
\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef \
\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff]}

###############################################################################

#
# NOTE: This test uses the HMAC-SHA-384 and HMAC-SHA-512 keyed hash algorithms.
#       These were updated and now produce different results starting with the
#       .NET Framework 2.0 Service Pack 1.  Please refer to the following page
#       for more information:
#
#       https://blogs.msdn.com/shawnfa/archive/2007/01/31/
#          please-do-not-use-the-net-2-0-hmacsha512-and-hmacsha384-classes.aspx
#
#       https://bit.ly/2chRv2v (shortened version of above)
#
#       This test has been constrained to run only on the .NET Framework 2.0
#       Service Pack 1 or higher (including the .NET Framework 4.x).
#
runTest {test hash-1.1.1 {hash algorithms (.NET Framework)} -body {
  set text "random processes do not produce information"
  set result [list]

  foreach pair [lsort -unique [hash list]] {
    set type [lindex $pair 0]
    set name [lindex $pair 1]

    if {[string match -nocase -- http:* $name] || \
        [string match -nocase -- https:* $name]} then {
      continue
    }

    if {$type eq "normal"} then {
      lappend result [list $type $name \
          [hash $type $name $text]]
    } else {
      lappend result [list $type $name \
          [hash $type $name $text F96D8B9D49C6F03D]]
    }
  }

  lsort $result
} -cleanup {
  unset -nocomplain name type pair result text
} -constraints {eagle dotNet} -constraintExpression {[haveConstraint \
dotNet20Sp1OrHigher] || [haveConstraint dotNet40]} -result "\{keyed\
MACTripleDES B6095ED2AD96F6A5\} \{keyed\
System.Security.Cryptography.MACTripleDES B6095ED2AD96F6A5\} \{mac HMACMD5\
55CD9EE051258D537966F6914B2907CB\} \{mac HMACRIPEMD160\
913778721C4BA825B10E55788E17C5851080F4BC\} \{mac HMACSHA1\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{mac HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45DAEEDCB5242E7B5D94ECD76608EE7A \
6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac HMACSHA512 [appendArgs 089B \
E78A5213E4C359CAC895E4187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601C \
BF7B47BA53DB7D5CB7FB316D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.HMAC 457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\}\
\{mac System.Security.Cryptography.HMACMD5 55CD9EE051258D537966F6914B2907CB\}\
\{mac System.Security.Cryptography.HMACRIPEMD160\
913778721C4BA825B10E55788E17C5851080F4BC\} \{mac\
System.Security.Cryptography.HMACSHA1 [appendArgs 457B0A2E4834FF8AA0F9BFAD83F7 \
CA51EA9272B5]\} \{mac System.Security.Cryptography.HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
System.Security.Cryptography.HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45D \
AEEDCB5242E7B5D94ECD76608EE7A6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac\
System.Security.Cryptography.HMACSHA512 [appendArgs 089BE78A5213E4C359CAC895E4 \
187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601CBF7B47BA53DB7D5CB7FB31 \
6D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.KeyedHashAlgorithm\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{normal MD5\
4B002D94863407B17C9C9674F92B83D2\} \{normal RIPEMD-160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal RIPEMD160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal SHA\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA-256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA-384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF6 \
77A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA-512 [appendArgs 0B2D938 \
3516B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14B \
F1897023424D3AC68ACBE47B0F5481AF150291BC602]\} \{normal SHA1\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF67 \
7A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA512 [appendArgs 0B2D93835 \
16B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1 \
897023424D3AC68ACBE47B0F5481AF150291BC602]\} \{normal\
System.Security.Cryptography.HashAlgorithm\
9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal\
System.Security.Cryptography.MD5 4B002D94863407B17C9C9674F92B83D2\} \{normal\
System.Security.Cryptography.RIPEMD160\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal\
System.Security.Cryptography.RIPEMD160Managed\
A8F84EF9366CE15328DE9926B95701CCF23AC714\} \{normal\
System.Security.Cryptography.SHA1 9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\}\
\{normal System.Security.Cryptography.SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
System.Security.Cryptography.SHA384 [appendArgs 817579DE79219516CED0CEFEC8E894 \
3B06D6B01BE196C891A935073AF677A4BC3782304A76641AA6BF098CE792A93533]\} \{normal\
System.Security.Cryptography.SHA512 [appendArgs 0B2D9383516B2170FB1CFE7E04DAE6 \
BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1897023424D3AC68ACBE47 \
B0F5481AF150291BC602]\}"}

###############################################################################

runTest {test hash-1.1.2 {hash algorithms (.NET Core before 7)} -body {
  set text "random processes do not produce information"
  set result [list]

  foreach pair [lsort -unique [hash list]] {
    set type [lindex $pair 0]
    set name [lindex $pair 1]

    if {[string match -nocase -- http:* $name] || \
        [string match -nocase -- https:* $name]} then {
      continue
    }

    if {$type eq "normal"} then {
      lappend result [list $type $name \
          [hash $type $name $text]]
    } else {
      lappend result [list $type $name \
          [hash $type $name $text F96D8B9D49C6F03D]]
    }
  }

  lsort $result
} -cleanup {
  unset -nocomplain name type pair result text
} -constraints [fixConstraints {eagle dotNetCore !dotNetCore70 !dotNetCore80}] \
-result "\{mac HMACMD5 55CD9EE051258D537966F6914B2907CB\} \{mac HMACSHA1\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{mac HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45DAEEDCB5242E7B5D94ECD76608EE7A \
6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac HMACSHA512 [appendArgs 089B \
E78A5213E4C359CAC895E4187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601C \
BF7B47BA53DB7D5CB7FB316D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.HMACMD5 55CD9EE051258D537966F6914B2907CB\} \{mac\
System.Security.Cryptography.HMACSHA1 [appendArgs \
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5]\} \{mac\
System.Security.Cryptography.HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
System.Security.Cryptography.HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45D \
AEEDCB5242E7B5D94ECD76608EE7A6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac\
System.Security.Cryptography.HMACSHA512 [appendArgs 089BE78A5213E4C359CAC895E4 \
187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601CBF7B47BA53DB7D5CB7FB31 \
6D2CB4930922AB7A0AA19819]\} \{normal MD5 4B002D94863407B17C9C9674F92B83D2\}\
\{normal SHA1 9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF67 \
7A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA512 [appendArgs 0B2D93835 \
16B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1 \
897023424D3AC68ACBE47B0F5481AF150291BC602]\} \{normal\
System.Security.Cryptography.SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
System.Security.Cryptography.SHA384 [appendArgs 817579DE79219516CED0CEFEC8E894 \
3B06D6B01BE196C891A935073AF677A4BC3782304A76641AA6BF098CE792A93533]\} \{normal\
System.Security.Cryptography.SHA512 [appendArgs 0B2D9383516B2170FB1CFE7E04DAE6 \
BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1897023424D3AC68ACBE47 \
B0F5481AF150291BC602]\}"}

###############################################################################

runTest {test hash-1.1.3 {hash algorithms (.NET Core after 7)} -body {
  set text "random processes do not produce information"
  set result [list]

  foreach pair [lsort -unique [hash list]] {
    set type [lindex $pair 0]
    set name [lindex $pair 1]

    if {[string match -nocase -- http:* $name] || \
        [string match -nocase -- https:* $name]} then {
      continue
    }

    if {$type eq "normal"} then {
      lappend result [list $type $name \
          [hash $type $name $text]]
    } else {
      lappend result [list $type $name \
          [hash $type $name $text F96D8B9D49C6F03D]]
    }
  }

  lsort $result
} -cleanup {
  unset -nocomplain name type pair result text
} -constraints {eagle dotNetCore dotNetCore70OrHigher} -result "\{mac HMACMD5\
55CD9EE051258D537966F6914B2907CB\} \{mac HMACSHA1\
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5\} \{mac HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45DAEEDCB5242E7B5D94ECD76608EE7A \
6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac HMACSHA512 [appendArgs 089B \
E78A5213E4C359CAC895E4187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601C \
BF7B47BA53DB7D5CB7FB316D2CB4930922AB7A0AA19819]\} \{mac\
System.Security.Cryptography.HMACMD5 55CD9EE051258D537966F6914B2907CB\} \{mac\
System.Security.Cryptography.HMACSHA1 [appendArgs \
457B0A2E4834FF8AA0F9BFAD83F7CA51EA9272B5]\} \{mac\
System.Security.Cryptography.HMACSHA256\
F4BB7209D8015710EC185E78F36C26B143DE6E891D42B0C83038BBA7EB65FE06\} \{mac\
System.Security.Cryptography.HMACSHA384 [appendArgs F0253DF25F461FC75D997FF45D \
AEEDCB5242E7B5D94ECD76608EE7A6D6B0701AF147E5CF1D5C9A0A2DF0CCC379432C6B]\} \{mac\
System.Security.Cryptography.HMACSHA512 [appendArgs 089BE78A5213E4C359CAC895E4 \
187F5127B4E7B336F5440EC2DC907C3B8A92C95411FF1AE0A27E601CBF7B47BA53DB7D5CB7FB31 \
6D2CB4930922AB7A0AA19819]\} \{normal MD5 4B002D94863407B17C9C9674F92B83D2\}\
\{normal SHA1 9140A7C57CF2517AE1CA10742CEAA50C10D87DD3\} \{normal SHA256\
555840126C25C86F319ECFDCDB9C41D2110AB33591FF2F18FF57A29E6C1FAB8E\} \{normal\
SHA384 [appendArgs 817579DE79219516CED0CEFEC8E8943B06D6B01BE196C891A935073AF67 \
7A4BC3782304A76641AA6BF098CE792A93533]\} \{normal SHA512 [appendArgs 0B2D93835 \
16B2170FB1CFE7E04DAE6BAD3DD26D31D923F17FDA211950DF4F60408E58986E3746C531D14BF1 \
897023424D3AC68ACBE47B0F5481AF150291BC602]\}"}

###############################################################################

runTest {test stringMatch-101.1 {callback match mode} -setup {
  set interp [interp create]

  object invoke Eagle._Tests.Default TestSetMatchCallback $interp true
} -body {
  set result [list]

  foreach pattern [list one o* o.* ^(*)\$] {
    set match false; set error null

    set code [object invoke -flags +NonPublic \
        Eagle._Components.Private.StringOps Match \
        $interp Callback one $pattern false null \
        None match error]

    if {[string length $error] > 0} then {
      set error [getStringFromObjectHandle $error]
    }

    lappend result [list $code $match $error]
  }

  set result
} -cleanup {
  catch {
    object invoke Eagle._Tests.Default TestSetMatchCallback $interp false
  }

  catch {interp delete $interp}

  unset -nocomplain result error match code pattern interp
} -constraints {eagle command.object compile.TEST\
Eagle._Tests.Default.TestSetMatchCallback} -match regexp -result [appendArgs \
{^\{Ok True \{\}\} \{Ok True \{\}\} \{Ok True \{\}\} \{Error False } \
{\{(?:System\.ArgumentException|System\.Text\.RegularExpressions\.} \
{RegexParseException): .*\}\}$}]}

###############################################################################

runTest {test stringMatch-101.2 {callback match mode error} -setup {
  set interp [interp create]
} -body {
  set result [list]
  set match false; set error null

  set code [object invoke -flags +NonPublic \
      Eagle._Components.Private.StringOps Match \
      $interp Callback one two false null None \
      match error]

  if {[string length $error] > 0} then {
    set error [getStringFromObjectHandle $error]
  }

  lappend result [list $code $match $error]
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain result error match code interp
} -constraints {eagle command.object compile.TEST\
Eagle._Tests.Default.TestSetMatchCallback} -result \
{{Error False {invlid match callback}}}}

###############################################################################

runTest {test stringMatch-101.3 {Tcl SF bug #219233, legacy} -body {
  list [expr {int([string match {[a-z0-9_/-]} \\])}] \
      [expr {int([string match {[a-z0-9_/]} \\])}]
} -result {1 0}}

###############################################################################

runTest {test stringMatch-101.4 {Tcl SF bug #219233, fixed} -setup {
  set interp [interp create]
} -body {
  interp eval $interp {
    object invoke -flags +NonPublic -objectflags +AutoFlagsEnum \
        Interpreter.GetActive interpreterFlags +FixFor219233

    list [expr {int([string match {[a-z0-9_/-]} \\])}] \
        [expr {int([string match {[a-z0-9_/]} \\])}]
  }
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain interp
} -constraints {eagle} -result {0 0}}

###############################################################################

if {[isEagle] && [llength [info commands object]] > 0} then {
  catch {
    object invoke -flags +NonPublic Eagle._Components.Private.TraceOps \
        SetTraceEnabled false
  }
}

###############################################################################

runTest {test stringMatch-101.5 {stack checking with [string match]} -setup {
  set interp [interp create]
} -body {
  interp eval $interp {
    object invoke -flags +NonPublic -objectflags +AutoFlagsEnum \
        Interpreter.GetActive interpreterFlags +StringMatchStackChecking

    string match [appendArgs f [string repeat *o 200000]] \
        [appendArgs f [string repeat o 200000]]
  }
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain interp
} -constraints {eagle command.object stackIntensive} -result {False}}

###############################################################################

if {[isEagle] && [llength [info commands object]] > 0} then {
  catch {
    object invoke -flags +NonPublic Eagle._Components.Private.TraceOps \
        SetTraceEnabled true
  }
}

###############################################################################

runTest {test stringRepeat-1.1 {result limits with [string repeat]} -setup {
  set interp [interp create]
} -body {
  set code(1) [catch {
    interp eval $interp {
      interp resultlimit {} 2000
    }
  } result(1)]

  set code(2) [catch {
    interp eval $interp {
      string repeat A 2000; list
    }
  } result(2)]

  set code(3) [catch {
    interp eval $interp {
      string repeat A 2001; list
    }
  } result(3)]

  list $code(1) $result(1) $code(2) $result(2) $code(3) $result(3)
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain result code interp
} -constraints {eagle command.object memoryIntensive compile.RESULT_LIMITS} \
-result {0 {execute 2000 nested 2000} 0 {} 1 {cannot exceed length of 2000\
characters (2001)}}}

###############################################################################

runTest {test listRepeat-1.1 {result limits with [lrepeat]} -setup {
  set interp [interp create]
} -body {
  set code(1) [catch {
    interp eval $interp {
      interp resultlimit {} 2000
    }
  } result(1)]

  set code(2) [catch {
    interp eval $interp {
      lrepeat 1000 A; list
    }
  } result(2)]

  set code(3) [catch {
    interp eval $interp {
      lrepeat 1001 A; list
    }
  } result(3)]

  set code(4) [catch {
    interp eval $interp {
      lrepeat 1000 ""; list
    }
  } result(4)]

  list $code(1) $result(1) $code(2) $result(2) $code(3) $result(3) \
      $code(4) $result(4)
} -cleanup {
  catch {interp delete $interp}

  unset -nocomplain result code interp
} -constraints {eagle command.object memoryIntensive compile.RESULT_LIMITS} \
-result {0 {execute 2000 nested 2000} 0 {} 1 {cannot exceed length of 2000\
characters (2002)} 1 {cannot exceed length of 2000 characters (3000)}}}

###############################################################################

runTest {test split-100.1 {[split] with empty string} -body {
  list [split ""] [split "" ""] [split "" ", "]
} -result {{} {} {}}}

###############################################################################

source [file join [file normalize [file dirname [info script]]] epilogue.eagle]
