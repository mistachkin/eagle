###############################################################################
#
# pkgt.eagle --
#
# Extensible Adaptable Generalized Logic Engine (Eagle)
# Eagle Package Toolset Package File
#
# Copyright (c) 2007-2012 by Joe Mistachkin.  All rights reserved.
#
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: $
#
###############################################################################

#
# NOTE: Use our own namespace here because even though we do not directly
#       support namespaces ourselves, we do not want to pollute the global
#       namespace if this script actually ends up being evaluated in Tcl.
#
namespace eval ::Eagle {
  #
  # NOTE: This procedure sets up the default values for all configuration
  #       parameters used by this package.  If the force argument is non-zero,
  #       any existing values will be overwritten and set back to their
  #       default values.
  #
  proc setupPackageToolsetVars { force {cleanup false} } {
    #
    # NOTE: Using the [getAuxiliaryBaseUri] procedure requires the update
    #       package.
    #
    # NOTE: The base URI used to build the URIs for the Package Client
    #       Toolset downloads.
    #
    variable baseUri; # DEFAULT: [getAuxiliaryBaseUri] -OR- https://urn.to/r

    if {$cleanup} then {
      unset -nocomplain baseUri
    } elseif {$force || ![info exists baseUri]} then {
      if {[isEagle]} then {
        set baseUri [getAuxiliaryBaseUri]
      } else {
        set baseUri https://urn.to/r
      }
    }

    #
    # NOTE: The URN, relative to the base URI, where the Package Client
    #       Toolset may be downloaded.
    #
    variable packageToolsetUrn; # DEFAULT: pkg_client_only

    if {$cleanup} then {
      unset -nocomplain packageToolsetUrn
    } elseif {$force || ![info exists packageToolsetUrn]} then {
      set packageToolsetUrn pkg_client_only
    }

    #
    # NOTE: The URI where the Package Client Toolset may be downloaded.
    #
    variable packageToolsetUri; # DEFAULT: ${baseUri}/${packageToolsetUrn}

    if {$cleanup} then {
      unset -nocomplain packageToolsetUri
    } elseif {$force || ![info exists packageToolsetUri]} then {
      set packageToolsetUri {${baseUri}/${packageToolsetUrn}}
    }

    #
    # NOTE: The URN, relative to the base URI, where the TclKit DLL for
    #       a particular platform may be downloaded.
    #
    variable tclKitDllUrn; # DEFAULT: tclkit_dll_${platform}

    if {$cleanup} then {
      unset -nocomplain tclKitDllUrn
    } elseif {$force || ![info exists tclKitDllUrn]} then {
      set tclKitDllUrn {tclkit_dll_${platform}}
    }

    #
    # NOTE: The URI where the TclKit DLL for a particular platform may
    #       be downloaded.
    #
    variable tclKitDllUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain tclKitDllUri
    } elseif {$force || ![info exists tclKitDllUri]} then {
      set tclKitDllUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The URN, relative to the base URI, where the Harpy and Badge
    #       plugins for a particular build may be downloaded.
    #
    variable securityToolsetUrn; # DEFAULT: security_toolset_${platform}

    if {$cleanup} then {
      unset -nocomplain securityToolsetUrn
    } elseif {$force || ![info exists securityToolsetUrn]} then {
      set securityToolsetUrn {security_toolset_${platform}}
    }

    #
    # NOTE: The URI where the Harpy and Badge plugins for a particular
    #       build may be downloaded.
    #
    variable securityToolsetUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain securityToolsetUri
    } elseif {$force || ![info exists securityToolsetUri]} then {
      set securityToolsetUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The list of URNs, relative to the base URI, where license
    #       certificate requests should be sent.  One of these will be
    #       selected at random.
    #
    variable licenseUrns; # DEFAULT: get_license_01 ... get_license_NN

    if {$cleanup} then {
      unset -nocomplain licenseUrns
    } elseif {$force || ![info exists licenseUrns]} then {
      set licenseUrns [list \
          get_license_01 get_license_02 get_license_03 get_license_04 \
          get_license_05 get_license_06 get_license_07]
    }

    #
    # NOTE: The URI where license certificate requests should be sent.
    #
    variable licenseUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain licenseUri
    } elseif {$force || ![info exists licenseUri]} then {
      set licenseUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The list of URNs, relative to the base URI, where test script
    #       evaluation requests should be submitted to the "safe" sandbox.
    #       One of these will be selected at random.
    #
    variable sandboxEvalUrns; # DEFAULT: eval_01 ... eval_NN

    if {$cleanup} then {
      unset -nocomplain sandboxEvalUrns
    } elseif {$force || ![info exists sandboxEvalUrns]} then {
      set sandboxEvalUrns [list \
          eval_01 eval_02 eval_03 eval_04 eval_05 eval_06 eval_07]
    }

    #
    # NOTE: The URI where script evaluation requests should be submitted
    #       to the "safe" sandbox.
    #
    variable sandboxEvalUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain sandboxEvalUri
    } elseif {$force || ![info exists sandboxEvalUri]} then {
      set sandboxEvalUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The list of URNs, relative to the base URI, where the named
    #       example scripts may be obtained.  One of these will be selected
    #       at random.
    #
    variable scriptUrns; # DEFAULT: script_01 ... script_NN

    if {$cleanup} then {
      unset -nocomplain scriptUrns
    } elseif {$force || ![info exists scriptUrns]} then {
      set scriptUrns [list \
          script_01 script_02 script_03 script_04 script_05 script_06 \
          script_07]
    }

    #
    # NOTE: The URI where named example scripts may be obtained.
    #
    variable scriptUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain scriptUri
    } elseif {$force || ![info exists scriptUri]} then {
      set scriptUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The list of URNs, relative to the base URI, where the remote
    #       package index may be obtained.  One of these will be selected
    #       at random.
    #
    variable packageIndexUrns; # DEFAULT: package_index_01 ... package_index_NN

    if {$cleanup} then {
      unset -nocomplain packageIndexUrns
    } elseif {$force || ![info exists packageIndexUrns]} then {
      set packageIndexUrns [list \
          package_index_01 package_index_02 package_index_03 package_index_04 \
          package_index_05 package_index_06 package_index_07]
    }

    #
    # NOTE: The URI where the remote package index may be obtained.
    #
    variable packageIndexUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain packageIndexUri
    } elseif {$force || ![info exists packageIndexUri]} then {
      set packageIndexUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The URI where the current external IP address may be obtained.
    #
    variable ipUri; # DEFAULT: ${baseUri}/${urn}

    if {$cleanup} then {
      unset -nocomplain ipUri
    } elseif {$force || ![info exists ipUri]} then {
      set ipUri {${baseUri}/${urn}}
    }

    #
    # NOTE: The list of URNs, relative to the base URI, where the current
    #       external IP address may be obtained.  One of these will be
    #       selected at random.
    #
    variable ipUrns; # DEFAULT: ip_01 ... ip_NN

    if {$cleanup} then {
      unset -nocomplain ipUrns
    } elseif {$force || ![info exists ipUrns]} then {
      set ipUrns [list ip_01]
    }
  }

  #
  # NOTE: This procedure attempts to download and extract the Package Client
  #       Toolset.  The optional channel argument is the output channel where
  #       diagnostic information is sent.  The optional quiet argument should
  #       be non-zero to prevent diagnostic information from being emitted.
  #       This procedure may raise script errors.  The return value is the
  #       full path to the directory that should be added to the auto-path.
  #
  proc downloadAndExtractPackageClientToolset {
          {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable packageToolsetUri
    variable packageToolsetUrn

    package require Eagle.Test
    package require Eagle.Unzip

    set extractRootDirectory [getPackageInstallPath pkgd ea-pt-di]

    set uri [subst $packageToolsetUri]
    set fileName [getTemporaryFileName]

    if {[isEagle]} then {
      uri download $uri $fileName
    } else {
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp $uri 20 $channel $quiet -binary true]

      writeFile $fileName $data
    }

    set extractDirectory [extractZipArchive \
        $fileName $extractRootDirectory true]

    file delete $fileName

    return [file join $extractDirectory pkgr_an_d client 1.0 neutral]
  }

  #
  # NOTE: This procedure attempts to load (via [package require]) the package
  #       client toolset.  It is designed to be used in conjunction with the
  #       [downloadAndExtractPackageClientToolset] procedure, above.  Support
  #       is included for specifying an extra auto-path directory and API key
  #       to use.  By default, the [package unknown] handler is hooked to add
  #       the remote package repository lookup functionality.  Eagle supports
  #       extra script security via signed script certificates, which will be
  #       enabled by default, unless it is unavailable.
  #
  proc loadPackageClientToolset {
          {directory auto} {apiKeys ""} {hookUnknown true} {enableSecurity true}
          {isolateSecurity false} {strictSecurity false} {fetchKeyRing false}
          {debug false} } {
    #
    # NOTE: When running in Eagle, namespace support must be available and
    #       enabled.
    #
    if {[isEagle] && ![namespace enable]} then {
      error "namespace support must be enabled"
    }

    #
    # NOTE: Does the caller want automatic discovery of the directory that
    #       contains the (downloaded?) package client toolset?  Currently,
    #       this only works on Windows and searches the temporary download
    #       location, which normally obtains its value from the environment
    #       variable TEMP.
    #
    if {$directory eq "auto"} then {
      #
      # NOTE: First, before doing anything else, see if the package client
      #       toolset is already installed somewhere it can be loaded from.
      #
      set needDirectory true

      if {[isEagle]} then {
        #
        # NOTE: Force Eagle to find *ALL* available package index files.
        #       This must be done in the global scope so that the special
        #       global variable 'dir' set by the package index loading
        #       subsystem can be accessed.  Use [catch] here just in case
        #       a package index file raises a script error.
        #
        catch {
          uplevel #0 [list package scan -host -normal -refresh]
        }
      } else {
        #
        # HACK: Force Tcl to find *ALL* available package index files.
        #       Without this, checking for the available versions of a
        #       package using [package versions] likely will not succeed
        #       unless the package is already loaded.  Use [catch] here
        #       just in case a package index file raises a script error.
        #
        catch {
          package require [appendArgs \
              bogus_package_ [string trim [clock seconds] -]]
        }
      }

      #
      # NOTE: Check and see if the package repository client is a known
      #       package now.  If so, there is no need to search directories
      #       for it.
      #
      if {[llength [package versions Eagle.Package.Repository]] > 0} then {
        set needDirectory false
      }

      #
      # NOTE: Is searching for temporary download directories required at
      #       this point?
      #
      if {$needDirectory} then {
        set extractRootDirectory [getPackageInstallPath]

        foreach directory [findDirectoriesRecursive \
            [file join $extractRootDirectory pkgr_an_d]] {
          #
          # NOTE: Reset directory we just found to include the necessary
          #       sub-directory components for the actual client files
          #       and then stop, thereby selecting the first match.
          #
          set directory [file join $directory client 1.0 neutral]; break
        }
      }

      #
      # NOTE: If no directory was found, just clear the directory name,
      #       which will cause auto-path modification(s) to be skipped.
      #
      if {$directory eq "auto"} then {
        set directory ""
      }
    }

    #
    # NOTE: If there is a directory specified by the caller -OR- found
    #       via automatic directory discovery, add it to the auto-path
    #       now.
    #
    if {[string length $directory] > 0} then {
      #
      # NOTE: Only modify the auto-path if the directory is not already
      #       present.  This prevents needless variable trace execution
      #       that rescans the various auto-path directories.
      #
      if {![info exists ::auto_path] || \
          [lsearch -exact $::auto_path $directory] == -1} then {
        lappend ::auto_path $directory
      }
    }

    #
    # NOTE: If the caller wants to enable extra diagnostic information,
    #       set the appropriate environment variables now.
    #
    if {$debug} then {
      set ::env(DEBUG_PKGR) 1
      set ::env(DEBUG_PKGD) 1
      set ::env(DEBUG_PKGU) 1
    }

    #
    # NOTE: If the caller specified API keys, add them to the configured
    #       list of API keys for the package repository client now.  This
    #       uses a special global variable.
    #
    if {[llength $apiKeys] > 0} then {
      eval lappend ::pkgr_api_keys $apiKeys
    }

    #
    # NOTE: If the caller wants to enable the extra Eagle script security,
    #       attempt to do that now.  Only treat a failure here as fatal if
    #       the caller said so.
    #
    if {[isEagle] && $enableSecurity} then {
      if {[catch {
        try {
          if {$isolateSecurity} then {
            set savedPluginFlags [object invoke -flags +NonPublic \
                Interpreter.GetActive PluginFlags]

            object invoke -flags +NonPublic Interpreter.GetActive \
                PluginFlags [combineFlags $savedPluginFlags Isolated]
          }

          uplevel 1 [list source enableSecurity]
        } finally {
          if {$isolateSecurity && [info exists savedPluginFlags]} then {
            object invoke -flags +NonPublic Interpreter.GetActive \
                PluginFlags [appendArgs = $savedPluginFlags]
          }
        }
      } error] && $strictSecurity} then {
        error $error
      }
    }

    #
    # NOTE: If the caller wants to fetch an official key ring from remote
    #       URI (i.e. within Harpy), attempt to do that now.  Only treat
    #       a failure here as fatal if the caller said so.
    #
    if {[isEagle] && $fetchKeyRing} then {
      if {[catch {
        try {
          if {$isolateSecurity} then {
            set savedPluginFlags [object invoke -flags +NonPublic \
                Interpreter.GetActive PluginFlags]

            object invoke -flags +NonPublic Interpreter.GetActive \
                PluginFlags [combineFlags $savedPluginFlags Isolated]
          }

          uplevel 1 [list debug keyring]
        } finally {
          if {$isolateSecurity && [info exists savedPluginFlags]} then {
            object invoke -flags +NonPublic Interpreter.GetActive \
                PluginFlags [appendArgs = $savedPluginFlags]
          }
        }
      } error] && $strictSecurity} then {
        error $error
      }
    }

    #
    # NOTE: In Eagle, to actually enable make use of the [package unknown]
    #       handler, an interpreter flag must be disabled.  If necessary,
    #       do that now.
    #
    if {[isEagle] && $hookUnknown} then {
      object invoke -flags +NonPublic -objectflags +AutoFlagsEnum \
          Interpreter.GetActive interpreterFlags -NoPackageUnknown
    }

    #
    # NOTE: Finally, attempt to actually load the package repository client.
    #       This may fail for a number of reasons.  The most likely failure
    #       case is when the directory containing the package is not found;
    #       however, there are other possible failure modes.
    #
    package require Eagle.Package.Repository
  }

  #
  # NOTE: This procedure attempts to download and extract a native TclKit DLL
  #       for the current platform.  The optional channel argument is the
  #       output channel where diagnostic information is sent.  The optional
  #       quiet argument should be non-zero to prevent diagnostic information
  #       from being emitted.  This procedure may raise script errors.  The
  #       return value is the full path to the native TclKit DLL file.
  #
  proc downloadAndExtractNativeTclKitDll {
          {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable tclKitDllUri
    variable tclKitDllUrn

    package require Eagle.Test
    package require Eagle.Unzip

    set platform [machineToPlatform $::tcl_platform(machine) true]

    set extractRootDirectory [getPackageInstallPath \
        [appendArgs KitDll_ $platform] ea-td-di]

    set urn [subst $tclKitDllUrn]; set uri [subst $tclKitDllUri]
    set fileName [getTemporaryFileName]

    if {[isEagle]} then {
      uri download $uri $fileName
    } else {
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp $uri 20 $channel $quiet -binary true]

      writeFile $fileName $data
    }

    set extractDirectory [extractZipArchive \
        $fileName $extractRootDirectory true]

    file delete $fileName

    return [lindex [glob -nocomplain \
        [file join $extractDirectory lib *[info sharedlibextension]]] 0]
  }

  #
  # NOTE: This procedure attempts to download and extract the Security Toolset,
  #       which includes the Harpy and Badge plugins.  The optional channel
  #       argument is the output channel where diagnostic information is sent.
  #       The optional quiet argument should be non-zero to prevent diagnostic
  #       information from being emitted.  This procedure may raise script
  #       errors.  The return value is the full path to a directory that should
  #       contain the "Harpy1.0" and "Badge1.0" plugin directories.
  #
  proc downloadAndExtractSecurityToolset {
          {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable securityToolsetUri
    variable securityToolsetUrn

    package require Eagle.Test
    package require Eagle.Unzip

    if {[info exists ::eagle_platform(text)] && \
        [string length $::eagle_platform(text)] > 0} then {
      set platform [string tolower $::eagle_platform(text)]
    } else {
      set platform [string tolower netFx20]; # TODO: Good default?
    }

    set extractRootDirectory [getPackageInstallPath \
        [appendArgs eee_ $platform] ea-st-di]

    set dir [string map [list fx ""] $platform]; # netfx20 -> net20
    set urn [subst $securityToolsetUrn]; set uri [subst $securityToolsetUri]
    set fileName [getTemporaryFileName]

    if {[isEagle]} then {
      uri download $uri $fileName
    } else {
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp $uri 20 $channel $quiet -binary true]

      writeFile $fileName $data
    }

    set extractDirectory [extractZipArchive \
        $fileName $extractRootDirectory true]

    file delete $fileName

    return [file join $extractDirectory build $dir lib]
  }

  #
  # NOTE: This procedure attempts to request a license certificate for Eagle,
  #       which includes the Harpy and Badge plugins.  The optional channel
  #       argument is the output channel where diagnostic information is sent.
  #       The optional quiet argument should be non-zero to prevent diagnostic
  #       information from being emitted.  This procedure may raise script
  #       errors.  The return value is the fully qualified file name for the
  #       resulting license certificate.
  #
  # WARNING: This procedure will send the short name and display name of the
  #          currently logged on user to the Eagle license server as they are
  #          required for a new license certificate to be issued.  Abuse of
  #          this service may result in a permanent ban from the service and
  #          revocation of any previously issued license certificates.
  #
  proc requestLicenseCertificate {
          {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable licenseUri
    variable licenseUrns

    package require Eagle.Test

    set certificateRootDirectory [getTemporaryPath]

    set processDirectoryPrefix [file join $certificateRootDirectory \
        [appendArgs ea-lc-di- [pid] -]]

    #
    # NOTE: Issue a warning to the user if it appears there is already a
    #       license certificate in a temporary directory that was created
    #       by this process.  Hopefully, this should reduce the number of
    #       duplicate requests.
    #
    set varName1 YES_PLEASE_FORCE_A_LICENSE_CERTIFICATE_REQUEST

    if {![info exists ::env($varName1)]} then {
      set processFileNames [list]

      foreach processDirectory [findDirectories \
          [appendArgs $processDirectoryPrefix *]] {
        eval lappend processFileNames [findFiles \
            [file join $processDirectory *]]
      }

      if {[llength $processFileNames] > 0} then {
        set warningCommand [list]

        if {[isEagle]} then {
          lappend warningCommand host result Error
        } else {
          lappend warningCommand puts stderr
        }

        set varName2 Override_Certificate

        lappend warningCommand [appendArgs \
            "One or more temporary license certificate files " \
            "apparently belonging to this process were found.  " \
            "If you wish to override this warning and force a " \
            "new license certificate request to be submitted, " \
            "set the \"" $varName1 "\" environment variable " \
            "(to anything); however, please keep in mind that " \
            "requesting too many license certificates and/or " \
            "requesting license certificates too fast MAY be " \
            "considered abusive behavior.  Upon success, the " \
            "resulting temporary license certificate file " \
            "SHOULD be saved to a secure location on the local " \
            "file system, e.g. the home directory associated " \
            "with the user submitting the license certificate " \
            "request.  The fully qualified file name for the " \
            "temporary license certificate MUST used as the " \
            "value for the \"" $varName2 "\" environment " \
            "variable; otherwise, it MAY NOT be found when one " \
            "of its associated plugins attempts to load.\n"]

        #
        # NOTE: Emit our carefully worded license warning message.
        #
        eval $warningCommand

        #
        # NOTE: Return the first pre-existing license certificate file
        #       name that was found.
        #
        return [lindex $processFileNames 0]
      }
    }

    set directory [appendArgs \
        $processDirectoryPrefix [string trim [clock seconds] -]]

    if {[info exists ::env(LicenseUri)]} then {
      #
      # HACK: Allow license request URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(LicenseUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official license request processing servers.
      #
      set urn [subst [lindex \
          $licenseUrns [expr {int(rand() * [llength $licenseUrns])}]]]

      set uri [subst $licenseUri]
    }

    #
    # HACK: If overridden (via the environment), use the user name
    #       specified; otherwise, attempt to automatically detect it.
    #       The server does not really care what this value is.  It
    #       can detect abuse by originating IP address, etc.
    #
    if {[info exists ::env(LicenseUserName)]} then {
      set userName $::env(LicenseUserName)
    } else {
      if {![isEagle] || [catch {
        object invoke System.Security.Principal.WindowsIdentity \
            GetCurrent.Name
      } userName]} then {
        #
        # HACK: Fallback to using a value from the "tcl_platform" array.
        #       For native Tcl, this is the only choice.  For Eagle, it
        #       is used as a fallback.
        #
        if {[info exists ::tcl_platform(user)]} then {
          set userName $::tcl_platform(user)
        } else {
          set userName "NO USER NAME"
        }
      }
    }

    #
    # HACK: If overridden (via the environment), use the display name
    #       specified; otherwise, attempt to automatically detect it.
    #       The server does not really care what this value is.  It
    #       can detect abuse by originating IP address, etc.
    #
    if {[info exists ::env(LicenseDisplayName)]} then {
      set displayName $::env(LicenseDisplayName)
    } else {
      if {![isEagle] || [catch {
        object load System.DirectoryServices.AccountManagement

        object invoke \
            System.DirectoryServices.AccountManagement.UserPrincipal \
            Current.DisplayName
      } displayName]} then {
        #
        # HACK: Fallback to using a value from the "tcl_platform" array.
        #       This value is not set by native Tcl or Eagle; therefore,
        #       the user would have to set it manually prior to calling
        #       this procedure.
        #
        if {[info exists ::tcl_platform(userDisplayName)]} then {
          set displayName $::tcl_platform(userDisplayName)
        } else {
          set displayName "NO DISPLAY NAME"
        }
      }
    }

    #
    # NOTE: Add the necessary query parameters to the license request
    #       URI, making sure to properly escape their values.
    #
    if {[isEagle]} then {
      append uri ?userName= [uri escape data $userName]
      append uri &displayName= [uri escape data $displayName]
    } else {
      package require http 2.0

      append uri ? [::http::formatQuery \
          userName $userName displayName $displayName]
    }

    if {[isEagle]} then {
      set data [uri download -inline $uri]
    } else {
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp $uri 20 $channel $quiet -binary true]
      package require Eagle.Auxiliary
    }

    if {[getDictionaryValue $data returnCode] ne "Ok"} then {
      if {[string length $data] > 0} then {
        error [appendArgs \
            "request failed with error information: " $data]
      } else {
        error "request failed without providing error information"
      }
    }

    set fileName [getTemporaryFileName]
    writeFile $fileName [getDictionaryValue $data result]
    set newFileName [file join $directory [file tail $fileName]]

    file mkdir $directory; file copy $fileName $newFileName
    file delete $fileName

    return $newFileName
  }

  #
  # NOTE: This procedure attempts to submit the specified script to a remote
  #       sandbox for evaluation.  The apiKey parameter is the optional API
  #       key to use, which MAY enable additional permissions in the remote
  #       sandbox.  The params parameter contains any optional extra names
  #       and values to include in the submitted query.  Upon success, this
  #       procedure returns a Tcl dictionary that includes at least the keys
  #       "returnCode", "result", and "errorLine".  The "returnCode" value
  #       will be "Ok", "Error", "Return", "Break", "Continue", or possibly
  #       a signed integer.  The "result" value will be the textual result
  #       of the script or an error message.  The "errorLine" value will be
  #       zero or the line where a script error was raised.  This procedure
  #       may raise script errors.
  #
  proc evaluateInRemoteSandbox {
          script {apiKey ""} {params ""} {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable sandboxEvalUri
    variable sandboxEvalUrns

    if {[info exists ::env(SandboxEvalUri)]} then {
      #
      # HACK: Allow remote sandbox URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(SandboxEvalUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official remote sandbox servers.
      #
      set urn [subst [lindex \
          $sandboxEvalUrns [expr {int(rand() * [llength $sandboxEvalUrns])}]]]

      set uri [subst $sandboxEvalUri]
    }

    set query [list go 1 raw 1 script $script]

    if {[string length $apiKey] > 0} then {
      lappend query apiKey $apiKey
    }

    if {[llength $params] > 0} then {
      eval lappend query $params
    }

    if {[isEagle]} then {
      return [uri upload -inline -data $query $uri]
    } else {
      package require http 2.0
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp

      return [getFileViaHttp \
          $uri 20 $channel $quiet -binary true \
          -query [eval ::http::formatQuery $query]]
    }
  }

  #
  # NOTE: This procedure attempts to query the list of named example scripts.
  #       The apiKey parameter is the optional API key to use, which MAY enable
  #       additional permissions within the remote repository.  The optional
  #       channel argument is the output channel where diagnostic information
  #       is sent.  The optional quiet argument should be non-zero to prevent
  #       diagnostic information from being emitted.  This procedure may raise
  #       script errors.  The return value is the list of all available example
  #       scripts.
  #
  proc listExampleScripts {
          {apiKey ""} {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable scriptUri
    variable scriptUrns

    if {[info exists ::env(ScriptUri)]} then {
      #
      # HACK: Allow example script URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(ScriptUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official example script servers.
      #
      set urn [subst [lindex \
          $scriptUrns [expr {int(rand() * [llength $scriptUrns])}]]]

      set uri [subst $scriptUri]
    }

    set query [list raw 1 method list]

    if {[string length $apiKey] > 0} then {
      lappend query apiKey $apiKey
    }

    if {[isEagle]} then {
      set fullUri $uri

      foreach {name value} $query {
        if {[string first ? $fullUri] != -1} then {
          append fullUri &
        } else {
          append fullUri ?
        }

        append fullUri \
            [uri escape data $name] = [uri escape data $value]
      }

      set data [uri download -inline $fullUri]
    } else {
      package require http 2.0
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp \
          $uri 20 $channel $quiet -binary true \
          -query [eval ::http::formatQuery $query]]
    }

    if {[string length $data] == 0} then {
      error "request failed without providing error information"
    }

    if {![string is list -strict $data] || [llength $data] < 2} then {
      error [appendArgs \
          "request failed with error information: " $data]
    }

    set code [lindex $data 0]
    set result [lindex $data 1]

    if {$code ne "OK"} then {
      error $result
    }

    return $result
  }

  #
  # NOTE: This procedure attempts to download (and save) the specified named
  #       example script.  The apiKey parameter is the optional API key to use,
  #       which MAY enable additional permissions within the remote repository.
  #       The optional channel argument is the output channel where diagnostic
  #       information is sent.  The optional quiet argument should be non-zero
  #       to prevent diagnostic information from being emitted.  This procedure
  #       may raise script errors.  The return value is the full path to the
  #       saved example script.
  #
  proc downloadExampleScript {
          script {apiKey ""} {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable scriptUri
    variable scriptUrns

    package require Eagle.Test

    if {[info exists ::env(ScriptUri)]} then {
      #
      # HACK: Allow example script URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(ScriptUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official example script servers.
      #
      set urn [subst [lindex \
          $scriptUrns [expr {int(rand() * [llength $scriptUrns])}]]]

      set uri [subst $scriptUri]
    }

    set fileName [getTemporaryFileName]
    set query [list raw 1 method get script $script]

    if {[string length $apiKey] > 0} then {
      lappend query apiKey $apiKey
    }

    if {[isEagle]} then {
      set fullUri $uri

      foreach {name value} $query {
        if {[string first ? $fullUri] != -1} then {
          append fullUri &
        } else {
          append fullUri ?
        }

        append fullUri \
            [uri escape data $name] = [uri escape data $value]
      }

      set data [uri download -inline $fullUri]
    } else {
      package require http 2.0
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp \
          $uri 20 $channel $quiet -binary true \
          -query [eval ::http::formatQuery $query]]
    }

    if {[string length $data] == 0} then {
      error "request failed without providing error information"
    }

    if {![string is list -strict $data] || [llength $data] < 2} then {
      error [appendArgs \
          "request failed with error information: " $data]
    }

    set code [lindex $data 0]
    set result [lindex $data 1]

    if {$code ne "OK"} then {
      error $result
    }

    set signature ""

    if {[llength $data] >= 2} then {
      set signature [lindex $data 2]
    }

    writeFile $fileName $result

    if {[string length $signature] > 0} then {
      writeFile [appendArgs $fileName .harpy] $signature
    }

    return $fileName
  }

  #
  # NOTE: This procedure attempts to download (and save) the remote package
  #       index script.  The apiKey parameter is the optional API key to use,
  #       which MAY enable additional permissions within the remote repository.
  #       The optional channel argument is the output channel where diagnostic
  #       information is sent.  The optional quiet argument should be non-zero
  #       to prevent diagnostic information from being emitted.  The autoPath
  #       parameter should be non-zero to evaluate the returned package index
  #       -OR- zero to simply save it to the file system.  This procedure may
  #       raise script errors.  The return value is the full path to the saved
  #       package index script if the autoPath parameter is zero; otherwise,
  #       it is the result of the package index script evaluation.
  #
  proc downloadPackageIndexScript {
          {apiKey ""} {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable packageIndexUri
    variable packageIndexUrns

    package require Eagle.Test

    if {[info exists ::env(PackageIndexUri)]} then {
      #
      # HACK: Allow package index URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(PackageIndexUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official example script servers.
      #
      set urn [subst [lindex $packageIndexUrns \
          [expr {int(rand() * [llength $packageIndexUrns])}]]]

      set uri [subst $packageIndexUri]
    }

    set directory [getTemporaryFileName]

    if {[isEagle]} then {
      file cleanup -type Directory $directory
    }

    file delete $directory; file mkdir $directory

    set fileName [file join $directory pkgIndex.eagle]
    set query [list raw 1 method get script pkgIndex.eagle]

    if {[string length $apiKey] > 0} then {
      lappend query apiKey $apiKey
    }

    if {[isEagle]} then {
      set fullUri $uri

      foreach {name value} $query {
        if {[string first ? $fullUri] != -1} then {
          append fullUri &
        } else {
          append fullUri ?
        }

        append fullUri \
            [uri escape data $name] = [uri escape data $value]
      }

      set data [uri download -inline $fullUri]
    } else {
      package require http 2.0
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [getFileViaHttp \
          $uri 20 $channel $quiet -binary true \
          -query [eval ::http::formatQuery $query]]
    }

    if {[string length $data] == 0} then {
      error "request failed without providing error information"
    }

    if {![string is list -strict $data] || [llength $data] < 2} then {
      error [appendArgs \
          "request failed with error information: " $data]
    }

    set code [lindex $data 0]
    set result [lindex $data 1]

    if {$code ne "OK"} then {
      error $result
    }

    set signature ""

    if {[llength $data] >= 2} then {
      set signature [lindex $data 2]
    }

    if {[isEagle]} then {
      file cleanup $fileName
    }

    writeFile $fileName $result

    if {[string length $signature] > 0} then {
      if {[isEagle]} then {
        file cleanup [appendArgs $fileName .harpy]
      }

      writeFile [appendArgs $fileName .harpy] $signature
    }

    return $directory
  }

  #
  # NOTE: This procedure attempts to query (and return) the current external
  #       IPv4/6 address.  The apiKey parameter is the optional API key to use,
  #       which MAY enable additional permissions within the remote repository.
  #       The optional channel argument is the output channel where diagnostic
  #       information is sent.  The optional quiet argument should be non-zero
  #       to prevent diagnostic information from being emitted.  This procedure
  #       may raise script errors.
  #
  proc getExternalIpAddress {
          {apiKey ""} {channel stdout} {quiet false} } {
    setupPackageToolsetVars false

    variable baseUri
    variable ipUri
    variable ipUrns

    package require Eagle.Test

    if {[info exists ::env(IpUri)]} then {
      #
      # HACK: Allow IP address index URI to be overridden via the global
      #       environment.  This is necessary to enable testing on Mono.
      #
      set uri $::env(IpUri)
    } else {
      #
      # NOTE: Normally, choose a random URN, which will resolve to one
      #       of the official example script servers.
      #
      set urn [subst [lindex $ipUrns \
          [expr {int(rand() * [llength $ipUrns])}]]]

      set uri [subst $ipUri]
    }

    set query [list raw 1]

    if {[string length $apiKey] > 0} then {
      lappend query apiKey $apiKey
    }

    if {[isEagle]} then {
      set fullUri $uri

      foreach {name value} $query {
        if {[string first ? $fullUri] != -1} then {
          append fullUri &
        } else {
          append fullUri ?
        }

        append fullUri \
            [uri escape data $name] = [uri escape data $value]
      }

      set data [string trim [uri download -inline $fullUri]]
    } else {
      package require http 2.0
      package require Eagle.Tools.Common

      namespace import -force \
          ::Eagle::Tools::Common::getFileViaHttp \
          ::Eagle::Tools::Common::writeFile

      set data [string trim [getFileViaHttp \
          $uri 20 $channel $quiet -binary true \
          -query [eval ::http::formatQuery $query]]]
    }

    if {[string length $data] == 0} then {
      error "request failed without providing error information"
    }

    if {![string is inetaddr -strict $data]} then {
      error [appendArgs \
          "request failed with error information: " $data]
    }

    return $data
  }

  #
  # NOTE: Provide the Eagle "package toolset" package to the interpreter.
  #
  package provide Eagle.Package.Toolset \
    [expr {[isEagle] ? [info engine PatchLevel] : "1.0"}]
}
